com.adamp.android.birdgame.AndroidBirdGame -> com.adamp.android.birdgame.AndroidBirdGame:
    void onCreate(android.os.Bundle) -> onCreate
com.adamp.birdgame.BirdGame -> com.adamp.a.a:
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> b
    void create() -> a
    void dispose() -> b
    void pause() -> c
    void resume() -> d
com.adamp.birdgame.Floor -> com.adamp.a.b:
    com.badlogic.gdx.graphics.g2d.Animation ani -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion[] tex -> b
    float stateTime -> c
    void render(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> a
com.adamp.birdgame.GameGestureListener -> com.adamp.a.c:
    com.adamp.birdgame.Pigeon p -> a
    boolean touchDown(float,float,int,int) -> a
    boolean tap(float,float,int,int) -> b
    boolean longPress(float,float) -> a
    boolean fling(float,float,int) -> a
    boolean pan(float,float,float,float) -> a
    boolean panStop(float,float,int,int) -> c
    boolean zoom(float,float) -> b
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
com.adamp.birdgame.GameScreen -> com.adamp.a.d:
    com.adamp.birdgame.BirdGame game -> d
    com.badlogic.gdx.graphics.OrthographicCamera camera -> e
    com.adamp.birdgame.PipePair pipePair -> f
    com.adamp.birdgame.Pigeon pigeon -> g
    com.adamp.birdgame.Floor floor -> h
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> i
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> j
    boolean dying -> a
    boolean playing -> b
    com.badlogic.gdx.input.GestureDetector$GestureAdapter gestureAdapter -> c
    void show() -> a
    void render(float) -> a
    void resize(int,int) -> a
    void hide() -> b
    void pause() -> c
    void resume() -> d
    void dispose() -> e
    com.adamp.birdgame.BirdGame access$000(com.adamp.birdgame.GameScreen) -> a
com.adamp.birdgame.GameScreen$1 -> com.adamp.a.e:
    com.adamp.birdgame.GameScreen this$0 -> a
    boolean tap(float,float,int,int) -> b
com.adamp.birdgame.MainMenuScreen -> com.adamp.a.f:
    com.adamp.birdgame.BirdGame g -> b
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> d
    com.badlogic.gdx.graphics.OrthographicCamera camera -> e
    com.badlogic.gdx.input.GestureDetector$GestureAdapter gestureAdapter -> a
    void render(float) -> a
    void resize(int,int) -> a
    void show() -> a
    void hide() -> b
    void pause() -> c
    void resume() -> d
    com.adamp.birdgame.BirdGame access$000(com.adamp.birdgame.MainMenuScreen) -> a
com.adamp.birdgame.MainMenuScreen$1 -> com.adamp.a.g:
    com.adamp.birdgame.MainMenuScreen this$0 -> a
    boolean tap(float,float,int,int) -> b
com.adamp.birdgame.Pigeon -> com.adamp.a.h:
    int height -> c
    int width -> d
    float x -> e
    float y -> f
    float dy -> g
    float risingDy -> h
    float rot -> i
    float drot -> j
    com.badlogic.gdx.math.Polygon rect -> a
    int riseCounter -> b
    boolean render(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> a
    void rise() -> a
    boolean calculatePhysics() -> c
    com.badlogic.gdx.math.Polygon getBounds() -> b
    boolean checkCollision() -> d
com.adamp.birdgame.PipePair -> com.adamp.a.i:
    float space -> a
    float start -> b
    com.adamp.birdgame.PipePair$Pipe top -> c
    com.adamp.birdgame.PipePair$Pipe bottom -> d
    int score -> e
    void render(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> a
    java.util.List getBounds() -> a
    void changePipes() -> c
    int getScore() -> b
    float access$000(com.adamp.birdgame.PipePair) -> a
    com.adamp.birdgame.PipePair$Pipe access$100(com.adamp.birdgame.PipePair) -> b
    com.adamp.birdgame.PipePair$Pipe access$200(com.adamp.birdgame.PipePair) -> c
com.adamp.birdgame.PipePair$1 -> com.adamp.a.j:
    com.adamp.birdgame.PipePair this$0 -> a
com.adamp.birdgame.PipePair$Pipe -> com.adamp.a.k:
    float x -> b
    float height -> c
    float y -> d
    com.badlogic.gdx.math.Polygon bounds -> e
    boolean top -> f
    com.adamp.birdgame.PipePair this$0 -> a
    boolean render(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> a
    com.badlogic.gdx.math.Polygon getBounds() -> a
com.adamp.birdgame.Resources -> com.adamp.a.l:
    com.badlogic.gdx.graphics.Texture name -> a
    com.badlogic.gdx.graphics.Texture spikes -> b
    com.badlogic.gdx.graphics.Texture floor -> c
    com.badlogic.gdx.graphics.Texture pipe -> d
    com.badlogic.gdx.graphics.Texture back -> e
    com.badlogic.gdx.graphics.Texture pigeon -> f
    com.badlogic.gdx.graphics.g2d.TextureRegion pigeonRegion -> g
    java.lang.String[] DEATH_QUOTES -> h
com.badlogic.gdx.Application -> com.badlogic.gdx.a:
    com.badlogic.gdx.Graphics getGraphics() -> a
    void log(java.lang.String,java.lang.String) -> a
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void debug(java.lang.String,java.lang.String) -> b
    com.badlogic.gdx.Application$ApplicationType getType() -> b
    void postRunnable(java.lang.Runnable) -> a
    void addLifecycleListener(com.badlogic.gdx.LifecycleListener) -> a
    void removeLifecycleListener(com.badlogic.gdx.LifecycleListener) -> b
com.badlogic.gdx.Application$ApplicationType -> com.badlogic.gdx.b:
    com.badlogic.gdx.Application$ApplicationType Android -> a
    com.badlogic.gdx.Application$ApplicationType Desktop -> b
    com.badlogic.gdx.Application$ApplicationType Applet -> c
    com.badlogic.gdx.Application$ApplicationType WebGL -> d
    com.badlogic.gdx.Application$ApplicationType iOS -> e
    com.badlogic.gdx.Application$ApplicationType[] $VALUES -> f
    com.badlogic.gdx.Application$ApplicationType[] values() -> values
    com.badlogic.gdx.Application$ApplicationType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.ApplicationListener -> com.badlogic.gdx.c:
    void create() -> a
    void resize(int,int) -> a
    void render() -> e
    void pause() -> c
    void resume() -> d
    void dispose() -> b
com.badlogic.gdx.Audio -> com.badlogic.gdx.d:
com.badlogic.gdx.Files -> com.badlogic.gdx.e:
    com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType) -> a
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
    java.lang.String getExternalStoragePath() -> a
com.badlogic.gdx.Files$FileType -> com.badlogic.gdx.f:
    com.badlogic.gdx.Files$FileType Classpath -> a
    com.badlogic.gdx.Files$FileType Internal -> b
    com.badlogic.gdx.Files$FileType External -> c
    com.badlogic.gdx.Files$FileType Absolute -> d
    com.badlogic.gdx.Files$FileType Local -> e
    com.badlogic.gdx.Files$FileType[] $VALUES -> f
    com.badlogic.gdx.Files$FileType[] values() -> values
    com.badlogic.gdx.Files$FileType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.Game -> com.badlogic.gdx.g:
    com.badlogic.gdx.Screen screen -> a
    void dispose() -> b
    void pause() -> c
    void resume() -> d
    void render() -> e
    void resize(int,int) -> a
    void setScreen(com.badlogic.gdx.Screen) -> a
com.badlogic.gdx.Gdx -> com.badlogic.gdx.h:
    com.badlogic.gdx.Application app -> a
    com.badlogic.gdx.Graphics graphics -> b
    com.badlogic.gdx.Audio audio -> c
    com.badlogic.gdx.Input input -> d
    com.badlogic.gdx.Files files -> e
    com.badlogic.gdx.Net net -> f
    com.badlogic.gdx.graphics.GLCommon gl -> g
    com.badlogic.gdx.graphics.GL10 gl10 -> h
    com.badlogic.gdx.graphics.GL11 gl11 -> i
    com.badlogic.gdx.graphics.GL20 gl20 -> j
com.badlogic.gdx.Graphics -> com.badlogic.gdx.i:
    boolean isGL20Available() -> a
    com.badlogic.gdx.graphics.GL20 getGL20() -> b
    int getWidth() -> c
    int getHeight() -> d
    float getDeltaTime() -> e
    boolean supportsExtension(java.lang.String) -> a
    void requestRendering() -> f
com.badlogic.gdx.Graphics$BufferFormat -> com.badlogic.gdx.j:
    int r -> a
    int g -> b
    int b -> c
    int a -> d
    int depth -> e
    int stencil -> f
    int samples -> g
    boolean coverageSampling -> h
    java.lang.String toString() -> toString
com.badlogic.gdx.Input -> com.badlogic.gdx.k:
    boolean isTouched() -> a
    boolean isTouched(int) -> a
    long getCurrentEventTime() -> b
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
com.badlogic.gdx.Input$Orientation -> com.badlogic.gdx.l:
    com.badlogic.gdx.Input$Orientation Landscape -> a
    com.badlogic.gdx.Input$Orientation Portrait -> b
    com.badlogic.gdx.Input$Orientation[] $VALUES -> c
    com.badlogic.gdx.Input$Orientation[] values() -> values
    com.badlogic.gdx.Input$Orientation valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.InputAdapter -> com.badlogic.gdx.m:
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
com.badlogic.gdx.InputProcessor -> com.badlogic.gdx.n:
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
com.badlogic.gdx.LifecycleListener -> com.badlogic.gdx.o:
    void pause() -> a
    void resume() -> b
    void dispose() -> c
com.badlogic.gdx.Net -> com.badlogic.gdx.p:
com.badlogic.gdx.Screen -> com.badlogic.gdx.q:
    void render(float) -> a
    void resize(int,int) -> a
    void show() -> a
    void hide() -> b
    void pause() -> c
    void resume() -> d
com.badlogic.gdx.assets.AssetDescriptor -> com.badlogic.gdx.a.a:
    java.lang.String fileName -> a
    java.lang.Class type -> b
    com.badlogic.gdx.assets.AssetLoaderParameters params -> c
    com.badlogic.gdx.files.FileHandle file -> d
    java.lang.String toString() -> toString
com.badlogic.gdx.assets.AssetErrorListener -> com.badlogic.gdx.a.b:
    void error(com.badlogic.gdx.assets.AssetDescriptor,java.lang.Throwable) -> a
com.badlogic.gdx.assets.AssetLoaderParameters -> com.badlogic.gdx.a.c:
    com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback loadedCallback -> a
com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback -> com.badlogic.gdx.a.d:
    void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class) -> a
com.badlogic.gdx.assets.AssetLoadingTask -> com.badlogic.gdx.a.e:
    com.badlogic.gdx.assets.AssetManager manager -> a
    com.badlogic.gdx.assets.AssetDescriptor assetDesc -> b
    com.badlogic.gdx.assets.loaders.AssetLoader loader -> c
    com.badlogic.gdx.utils.async.AsyncExecutor executor -> d
    long startTime -> e
    boolean asyncDone -> f
    boolean dependenciesLoaded -> g
    com.badlogic.gdx.utils.Array dependencies -> h
    com.badlogic.gdx.utils.async.AsyncResult depsFuture -> i
    com.badlogic.gdx.utils.async.AsyncResult loadFuture -> j
    java.lang.Object asset -> k
    int ticks -> l
    boolean cancel -> m
    java.lang.Void call() -> a
    boolean update() -> b
    void handleSyncLoader() -> e
    void handleAsyncLoader() -> f
    com.badlogic.gdx.files.FileHandle resolve(com.badlogic.gdx.assets.loaders.AssetLoader,com.badlogic.gdx.assets.AssetDescriptor) -> a
    java.lang.Object getAsset() -> c
    java.lang.Object call() -> d
com.badlogic.gdx.assets.AssetManager -> com.badlogic.gdx.a.f:
    com.badlogic.gdx.utils.ObjectMap assets -> a
    com.badlogic.gdx.utils.ObjectMap assetTypes -> b
    com.badlogic.gdx.utils.ObjectMap assetDependencies -> c
    com.badlogic.gdx.utils.ObjectMap loaders -> d
    com.badlogic.gdx.utils.Array loadQueue -> e
    com.badlogic.gdx.utils.async.AsyncExecutor executor -> f
    java.util.Stack tasks -> g
    com.badlogic.gdx.assets.AssetErrorListener listener -> h
    int loaded -> i
    int toLoad -> j
    com.badlogic.gdx.utils.Logger log -> k
    void unload(java.lang.String) -> a
    java.lang.String getAssetFileName(java.lang.Object) -> a
    boolean isLoaded(java.lang.String) -> b
    com.badlogic.gdx.assets.loaders.AssetLoader getLoader(java.lang.Class,java.lang.String) -> a
    void load(java.lang.String,java.lang.Class,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    boolean update() -> a
    void finishLoading() -> b
    void injectDependencies(java.lang.String,com.badlogic.gdx.utils.Array) -> a
    void injectDependency(java.lang.String,com.badlogic.gdx.assets.AssetDescriptor) -> a
    void nextTask() -> e
    void addTask(com.badlogic.gdx.assets.AssetDescriptor) -> a
    void addAsset(java.lang.String,java.lang.Class,java.lang.Object) -> a
    boolean updateTask() -> f
    void incrementRefCountedDependencies(java.lang.String) -> d
    void handleTaskError(java.lang.Throwable) -> a
    void dispose() -> c
    void clear() -> d
    int getReferenceCount(java.lang.String) -> c
    void setReferenceCount(java.lang.String,int) -> a
com.badlogic.gdx.assets.RefCountedContainer -> com.badlogic.gdx.a.g:
    java.lang.Object object -> a
    int refCount -> b
    void incRefCount() -> a
    void decRefCount() -> b
    int getRefCount() -> c
    void setRefCount(int) -> a
    java.lang.Object getObject(java.lang.Class) -> a
com.badlogic.gdx.assets.loaders.AssetLoader -> com.badlogic.gdx.a.a.a:
    com.badlogic.gdx.assets.loaders.FileHandleResolver resolver -> a
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader -> com.badlogic.gdx.a.a.b:
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
com.badlogic.gdx.assets.loaders.FileHandleResolver -> com.badlogic.gdx.a.a.c:
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
com.badlogic.gdx.assets.loaders.SynchronousAssetLoader -> com.badlogic.gdx.a.a.d:
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureLoader -> com.badlogic.gdx.a.a.e:
    com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo info -> a
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter) -> a
    com.badlogic.gdx.graphics.Texture loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo -> com.badlogic.gdx.a.a.f:
    java.lang.String filename -> a
    com.badlogic.gdx.graphics.TextureData data -> b
    com.badlogic.gdx.graphics.Texture texture -> c
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter -> com.badlogic.gdx.a.a.g:
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    boolean genMipMaps -> c
    com.badlogic.gdx.graphics.Texture texture -> d
    com.badlogic.gdx.graphics.TextureData textureData -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> g
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapU -> h
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapV -> i
com.badlogic.gdx.audio.Music -> com.badlogic.gdx.b.a:
com.badlogic.gdx.audio.Music$OnCompletionListener -> com.badlogic.gdx.b.b:
    void onCompletion(com.badlogic.gdx.audio.Music) -> a
com.badlogic.gdx.backends.android.AndroidApplication -> com.badlogic.gdx.backends.android.a:
    com.badlogic.gdx.backends.android.AndroidGraphics graphics -> a
    com.badlogic.gdx.backends.android.AndroidInput input -> b
    com.badlogic.gdx.backends.android.AndroidAudio audio -> c
    com.badlogic.gdx.backends.android.AndroidFiles files -> d
    com.badlogic.gdx.backends.android.AndroidNet net -> e
    com.badlogic.gdx.ApplicationListener listener -> f
    android.os.Handler handler -> g
    boolean firstResume -> h
    com.badlogic.gdx.utils.Array runnables -> i
    com.badlogic.gdx.utils.Array executedRunnables -> j
    com.badlogic.gdx.utils.Array lifecycleListeners -> k
    android.os.PowerManager$WakeLock wakeLock -> l
    int logLevel -> m
    void initialize(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
    android.widget.FrameLayout$LayoutParams createLayoutParams() -> c
    void createWakeLock(com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
    void hideStatusBar(com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> b
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    com.badlogic.gdx.Audio getAudio() -> d
    com.badlogic.gdx.Files getFiles() -> e
    com.badlogic.gdx.Graphics getGraphics() -> a
    com.badlogic.gdx.Input getInput() -> f
    com.badlogic.gdx.Net getNet() -> g
    com.badlogic.gdx.Application$ApplicationType getType() -> b
    int getVersion() -> h
    void postRunnable(java.lang.Runnable) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void debug(java.lang.String,java.lang.String) -> b
    void log(java.lang.String,java.lang.String) -> a
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> b
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void addLifecycleListener(com.badlogic.gdx.LifecycleListener) -> a
    void removeLifecycleListener(com.badlogic.gdx.LifecycleListener) -> b
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration -> com.badlogic.gdx.backends.android.b:
    boolean useGL20 -> a
    int r -> b
    int g -> c
    int b -> d
    int a -> e
    int depth -> f
    int stencil -> g
    int numSamples -> h
    boolean useAccelerometer -> i
    boolean useCompass -> j
    int touchSleepTime -> k
    boolean useWakelock -> l
    boolean hideStatusBar -> m
    int maxSimultaneousSounds -> n
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> o
    boolean getTouchEventsForLiveWallpaper -> p
    boolean useGLSurfaceViewAPI18 -> q
com.badlogic.gdx.backends.android.AndroidAudio -> com.badlogic.gdx.backends.android.c:
    android.media.SoundPool soundPool -> b
    android.media.AudioManager manager -> c
    java.util.List musics -> a
    void pause() -> a
    void resume() -> b
    void dispose() -> c
com.badlogic.gdx.backends.android.AndroidFileHandle -> com.badlogic.gdx.backends.android.d:
    android.content.res.AssetManager assets -> a
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle parent() -> a
    java.io.InputStream read() -> b
    long length() -> c
com.badlogic.gdx.backends.android.AndroidFiles -> com.badlogic.gdx.backends.android.e:
    java.lang.String sdcard -> a
    java.lang.String localpath -> b
    android.content.res.AssetManager assets -> c
    com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType) -> a
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
    java.lang.String getExternalStoragePath() -> a
com.badlogic.gdx.backends.android.AndroidGL10 -> com.badlogic.gdx.backends.android.f:
    javax.microedition.khronos.opengles.GL10 gl -> a
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glClientActiveTexture(int) -> a
    void glColorPointer(int,int,int,java.nio.Buffer) -> a
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDepthMask(boolean) -> glDepthMask
    void glDisable(int) -> glDisable
    void glDisableClientState(int) -> b
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glEnable(int) -> glEnable
    void glEnableClientState(int) -> c
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    java.lang.String glGetString(int) -> glGetString
    void glMatrixMode(int) -> d
    void glNormalPointer(int,int,java.nio.Buffer) -> a
    void glPixelStorei(int,int) -> glPixelStorei
    void glTexCoordPointer(int,int,int,java.nio.Buffer) -> b
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glVertexPointer(int,int,int,java.nio.Buffer) -> c
    void glLoadMatrixf(float[],int) -> a
com.badlogic.gdx.backends.android.AndroidGL11 -> com.badlogic.gdx.backends.android.g:
    javax.microedition.khronos.opengles.GL11 gl -> b
    void glBindBuffer(int,int) -> a
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData(int,int,int,java.nio.Buffer) -> d
    void glDeleteBuffers(int,java.nio.IntBuffer) -> a
    void glGenBuffers(int,java.nio.IntBuffer) -> b
    void glColorPointer(int,int,int,int) -> a
    void glNormalPointer(int,int,int) -> a
    void glTexCoordPointer(int,int,int,int) -> b
    void glVertexPointer(int,int,int,int) -> c
    void glDrawElements(int,int,int,int) -> d
com.badlogic.gdx.backends.android.AndroidGL20 -> com.badlogic.gdx.backends.android.AndroidGL20:
    void init() -> init
    void glAttachShader(int,int) -> glAttachShader
    void glBindBuffer(int,int) -> glBindBuffer
    void glBindFramebuffer(int,int) -> glBindFramebuffer
    void glBindRenderbuffer(int,int) -> glBindRenderbuffer
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    int glCheckFramebufferStatus(int) -> glCheckFramebufferStatus
    void glCompileShader(int) -> glCompileShader
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    int glCreateProgram() -> glCreateProgram
    int glCreateShader(int) -> glCreateShader
    void glDeleteBuffers(int,java.nio.IntBuffer) -> glDeleteBuffers
    void glDeleteFramebuffers(int,java.nio.IntBuffer) -> glDeleteFramebuffers
    void glDeleteProgram(int) -> glDeleteProgram
    void glDeleteRenderbuffers(int,java.nio.IntBuffer) -> glDeleteRenderbuffers
    void glDeleteShader(int) -> glDeleteShader
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDepthMask(boolean) -> glDepthMask
    void glDisable(int) -> glDisable
    void glDisableVertexAttribArray(int) -> glDisableVertexAttribArray
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glDrawElements(int,int,int,int) -> glDrawElements
    void glEnable(int) -> glEnable
    void glEnableVertexAttribArray(int) -> glEnableVertexAttribArray
    void glFramebufferRenderbuffer(int,int,int,int) -> glFramebufferRenderbuffer
    void glFramebufferTexture2D(int,int,int,int,int) -> glFramebufferTexture2D
    void glGenBuffers(int,java.nio.IntBuffer) -> glGenBuffers
    void glGenerateMipmap(int) -> glGenerateMipmap
    void glGenFramebuffers(int,java.nio.IntBuffer) -> glGenFramebuffers
    void glGenRenderbuffers(int,java.nio.IntBuffer) -> glGenRenderbuffers
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveAttrib
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveUniform
    int glGetAttribLocation(int,java.lang.String) -> glGetAttribLocation
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> glGetProgramiv
    java.lang.String glGetProgramInfoLog(int) -> glGetProgramInfoLog
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> glGetShaderiv
    java.lang.String glGetShaderInfoLog(int) -> glGetShaderInfoLog
    java.lang.String glGetString(int) -> glGetString
    int glGetUniformLocation(int,java.lang.String) -> glGetUniformLocation
    void glLinkProgram(int) -> glLinkProgram
    void glPixelStorei(int,int) -> glPixelStorei
    void glRenderbufferStorage(int,int,int,int) -> glRenderbufferStorage
    void glShaderSource(int,java.lang.String) -> glShaderSource
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glUniform1i(int,int) -> glUniform1i
    void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4fv
    void glUseProgram(int) -> glUseProgram
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> glVertexAttribPointer
com.badlogic.gdx.backends.android.AndroidGraphics -> com.badlogic.gdx.backends.android.h:
    android.view.View view -> a
    int width -> b
    int height -> c
    com.badlogic.gdx.backends.android.AndroidApplication app -> d
    com.badlogic.gdx.graphics.GLCommon gl -> e
    com.badlogic.gdx.graphics.GL10 gl10 -> f
    com.badlogic.gdx.graphics.GL11 gl11 -> g
    com.badlogic.gdx.graphics.GL20 gl20 -> h
    javax.microedition.khronos.egl.EGLContext eglContext -> i
    java.lang.String extensions -> j
    long lastFrameTime -> r
    float deltaTime -> s
    long frameStart -> t
    int frames -> u
    int fps -> v
    com.badlogic.gdx.math.WindowedMean mean -> w
    boolean created -> k
    boolean running -> l
    boolean pause -> m
    boolean resume -> n
    boolean destroy -> o
    float ppiX -> x
    float ppiY -> y
    float ppcX -> z
    float ppcY -> A
    float density -> B
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> C
    com.badlogic.gdx.Graphics$BufferFormat bufferFormat -> D
    boolean isContinuous -> E
    int[] value -> p
    java.lang.Object synch -> q
    void setPreserveContext(android.view.View) -> a
    android.view.View createGLSurfaceView(android.app.Activity,boolean,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy) -> a
    android.opengl.GLSurfaceView$EGLConfigChooser getEglConfigChooser() -> m
    void updatePpi() -> n
    boolean checkGL20() -> o
    com.badlogic.gdx.graphics.GL20 getGL20() -> b
    int getHeight() -> d
    int getWidth() -> c
    boolean isGL20Available() -> a
    void setupGL(javax.microedition.khronos.opengles.GL10) -> a
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    void logConfig(javax.microedition.khronos.egl.EGLConfig) -> a
    int getAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
    void resume() -> g
    void pause() -> h
    void destroy() -> i
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    float getDeltaTime() -> e
    void clearManagedCaches() -> j
    android.view.View getView() -> k
    boolean supportsExtension(java.lang.String) -> a
    void setContinuousRendering(boolean) -> a
    boolean isContinuousRendering() -> l
    void requestRendering() -> f
com.badlogic.gdx.backends.android.AndroidGraphics$1 -> com.badlogic.gdx.backends.android.i:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy val$resolutionStrategy -> a
    com.badlogic.gdx.backends.android.AndroidGraphics this$0 -> b
    void onMeasure(int,int) -> onMeasure
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
com.badlogic.gdx.backends.android.AndroidGraphics$1$1 -> com.badlogic.gdx.backends.android.j:
    com.badlogic.gdx.backends.android.AndroidGraphics$1 this$1 -> a
    boolean deleteSurroundingText(int,int) -> deleteSurroundingText
    void sendDownUpKeyEventForBackwardCompatibility(int) -> a
com.badlogic.gdx.backends.android.AndroidInput -> com.badlogic.gdx.backends.android.k:
    com.badlogic.gdx.utils.Pool usedKeyEvents -> a
    com.badlogic.gdx.utils.Pool usedTouchEvents -> b
    java.util.ArrayList keyListeners -> c
    java.util.ArrayList keyEvents -> d
    java.util.ArrayList touchEvents -> e
    int[] deltaX -> f
    int[] deltaY -> g
    boolean[] touched -> h
    int[] realId -> i
    com.badlogic.gdx.utils.IntMap keys -> o
    android.hardware.SensorManager manager -> p
    boolean accelerometerAvailable -> j
    float[] accelerometerValues -> q
    com.badlogic.gdx.Application app -> k
    android.content.Context context -> l
    com.badlogic.gdx.backends.android.AndroidTouchHandler touchHandler -> r
    int sleepTime -> s
    boolean catchBack -> t
    boolean catchMenu -> u
    boolean compassAvailable -> v
    boolean keyboardAvailable -> m
    float[] magneticFieldValues -> w
    boolean justTouched -> x
    com.badlogic.gdx.InputProcessor processor -> y
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> z
    com.badlogic.gdx.Input$Orientation nativeOrientation -> A
    long currentEventTimeStamp -> B
    android.hardware.SensorEventListener accelerometerListener -> C
    android.hardware.SensorEventListener compassListener -> D
    boolean requestFocus -> n
    boolean isTouched(int) -> a
    boolean isTouched() -> a
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
    void processEvents() -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
    void registerSensorListeners() -> d
    void unregisterSensorListeners() -> e
    long getCurrentEventTime() -> b
com.badlogic.gdx.backends.android.AndroidInput$KeyEvent -> com.badlogic.gdx.backends.android.l:
    long timeStamp -> a
    int type -> b
    int keyCode -> c
    char keyChar -> d
com.badlogic.gdx.backends.android.AndroidInput$SensorListener -> com.badlogic.gdx.backends.android.m:
    float[] accelerometerValues -> a
    float[] magneticFieldValues -> b
    com.badlogic.gdx.Input$Orientation nativeOrientation -> c
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> d
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent -> com.badlogic.gdx.backends.android.n:
    long timeStamp -> a
    int type -> b
    int x -> c
    int y -> d
    int pointer -> e
com.badlogic.gdx.backends.android.AndroidInputFactory -> com.badlogic.gdx.backends.android.o:
    com.badlogic.gdx.backends.android.AndroidInput newAndroidInput(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
com.badlogic.gdx.backends.android.AndroidInputThreePlus -> com.badlogic.gdx.backends.android.p:
    java.util.ArrayList genericMotionListeners -> o
    boolean onGenericMotion(android.view.View,android.view.MotionEvent) -> onGenericMotion
com.badlogic.gdx.backends.android.AndroidMusic -> com.badlogic.gdx.backends.android.q:
    com.badlogic.gdx.backends.android.AndroidAudio audio -> c
    android.media.MediaPlayer player -> d
    boolean isPrepared -> e
    boolean wasPlaying -> a
    com.badlogic.gdx.audio.Music$OnCompletionListener onCompletionListener -> b
    void dispose() -> c
    boolean isPlaying() -> a
    void pause() -> b
    void play() -> d
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.badlogic.gdx.backends.android.AndroidMusic$1 -> com.badlogic.gdx.backends.android.r:
    com.badlogic.gdx.backends.android.AndroidMusic this$0 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidNet -> com.badlogic.gdx.backends.android.s:
    com.badlogic.gdx.backends.android.AndroidApplication app -> a
    com.badlogic.gdx.net.NetJavaImpl netJavaImpl -> b
com.badlogic.gdx.backends.android.AndroidTouchHandler -> com.badlogic.gdx.backends.android.t:
    void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> a
com.badlogic.gdx.backends.android.surfaceview.EGLLogWrapper -> com.badlogic.gdx.backends.android.a.a:
    javax.microedition.khronos.egl.EGL10 mEgl10 -> d
    java.io.Writer mLog -> a
    boolean mLogArgumentNames -> b
    boolean mCheckError -> c
    int mArgCount -> e
    boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay,int[],javax.microedition.khronos.egl.EGLConfig[],int,int[]) -> eglChooseConfig
    boolean eglCopyBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,java.lang.Object) -> eglCopyBuffers
    javax.microedition.khronos.egl.EGLContext eglCreateContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,javax.microedition.khronos.egl.EGLContext,int[]) -> eglCreateContext
    javax.microedition.khronos.egl.EGLSurface eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int[]) -> eglCreatePbufferSurface
    javax.microedition.khronos.egl.EGLSurface eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[]) -> eglCreatePixmapSurface
    javax.microedition.khronos.egl.EGLSurface eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[]) -> eglCreateWindowSurface
    boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> eglDestroyContext
    boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> eglDestroySurface
    boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[]) -> eglGetConfigAttrib
    boolean eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[],int,int[]) -> eglGetConfigs
    javax.microedition.khronos.egl.EGLContext eglGetCurrentContext() -> eglGetCurrentContext
    javax.microedition.khronos.egl.EGLDisplay eglGetCurrentDisplay() -> eglGetCurrentDisplay
    javax.microedition.khronos.egl.EGLSurface eglGetCurrentSurface(int) -> eglGetCurrentSurface
    javax.microedition.khronos.egl.EGLDisplay eglGetDisplay(java.lang.Object) -> eglGetDisplay
    int eglGetError() -> eglGetError
    boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay,int[]) -> eglInitialize
    boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext) -> eglMakeCurrent
    boolean eglQueryContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext,int,int[]) -> eglQueryContext
    java.lang.String eglQueryString(javax.microedition.khronos.egl.EGLDisplay,int) -> eglQueryString
    boolean eglQuerySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,int,int[]) -> eglQuerySurface
    boolean eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> eglSwapBuffers
    boolean eglTerminate(javax.microedition.khronos.egl.EGLDisplay) -> eglTerminate
    boolean eglWaitGL() -> eglWaitGL
    boolean eglWaitNative(int,java.lang.Object) -> eglWaitNative
    void checkError() -> a
    void logLine(java.lang.String) -> a
    void log(java.lang.String) -> b
    void begin(java.lang.String) -> c
    void arg(java.lang.String,java.lang.String) -> a
    void end() -> b
    void flush() -> c
    void arg(java.lang.String,int) -> a
    void arg(java.lang.String,java.lang.Object) -> a
    void arg(java.lang.String,javax.microedition.khronos.egl.EGLDisplay) -> a
    void arg(java.lang.String,javax.microedition.khronos.egl.EGLContext) -> a
    void arg(java.lang.String,javax.microedition.khronos.egl.EGLSurface) -> a
    void returns(java.lang.String) -> d
    void returns(int) -> b
    void returns(boolean) -> a
    void returns(java.lang.Object) -> a
    java.lang.String toString(java.lang.Object) -> b
    void arg(java.lang.String,int[]) -> a
    void arg(java.lang.String,java.lang.Object[]) -> a
    java.lang.String toString(int,int[],int) -> a
    java.lang.String toString(int,java.lang.Object[],int) -> a
    java.lang.String getHex(int) -> c
    java.lang.String getErrorString(int) -> a
com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy -> com.badlogic.gdx.backends.android.a.b:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLDebugHelper -> com.badlogic.gdx.backends.android.a.c:
    javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL,int,java.io.Writer) -> a
com.badlogic.gdx.backends.android.surfaceview.GLErrorWrapper -> com.badlogic.gdx.backends.android.a.d:
    boolean mCheckError -> a
    boolean mCheckThread -> b
    java.lang.Thread mOurThread -> c
    void checkThread() -> a
    void checkError() -> b
    void glActiveTexture(int) -> glActiveTexture
    void glAlphaFunc(int,float) -> glAlphaFunc
    void glAlphaFuncx(int,int) -> glAlphaFuncx
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glClearColorx(int,int,int,int) -> glClearColorx
    void glClearDepthf(float) -> glClearDepthf
    void glClearDepthx(int) -> glClearDepthx
    void glClearStencil(int) -> glClearStencil
    void glClientActiveTexture(int) -> glClientActiveTexture
    void glColor4f(float,float,float,float) -> glColor4f
    void glColor4x(int,int,int,int) -> glColor4x
    void glColorMask(boolean,boolean,boolean,boolean) -> glColorMask
    void glColorPointer(int,int,int,java.nio.Buffer) -> glColorPointer
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexSubImage2D
    void glCopyTexImage2D(int,int,int,int,int,int,int,int) -> glCopyTexImage2D
    void glCopyTexSubImage2D(int,int,int,int,int,int,int,int) -> glCopyTexSubImage2D
    void glCullFace(int) -> glCullFace
    void glDeleteTextures(int,int[],int) -> glDeleteTextures
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDepthFunc(int) -> glDepthFunc
    void glDepthMask(boolean) -> glDepthMask
    void glDepthRangef(float,float) -> glDepthRangef
    void glDepthRangex(int,int) -> glDepthRangex
    void glDisable(int) -> glDisable
    void glDisableClientState(int) -> glDisableClientState
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glEnable(int) -> glEnable
    void glEnableClientState(int) -> glEnableClientState
    void glFinish() -> glFinish
    void glFlush() -> glFlush
    void glFogf(int,float) -> glFogf
    void glFogfv(int,float[],int) -> glFogfv
    void glFogfv(int,java.nio.FloatBuffer) -> glFogfv
    void glFogx(int,int) -> glFogx
    void glFogxv(int,int[],int) -> glFogxv
    void glFogxv(int,java.nio.IntBuffer) -> glFogxv
    void glFrontFace(int) -> glFrontFace
    void glFrustumf(float,float,float,float,float,float) -> glFrustumf
    void glFrustumx(int,int,int,int,int,int) -> glFrustumx
    void glGenTextures(int,int[],int) -> glGenTextures
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    int glGetError() -> glGetError
    void glGetIntegerv(int,int[],int) -> glGetIntegerv
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    java.lang.String glGetString(int) -> glGetString
    void glHint(int,int) -> glHint
    void glLightModelf(int,float) -> glLightModelf
    void glLightModelfv(int,float[],int) -> glLightModelfv
    void glLightModelfv(int,java.nio.FloatBuffer) -> glLightModelfv
    void glLightModelx(int,int) -> glLightModelx
    void glLightModelxv(int,int[],int) -> glLightModelxv
    void glLightModelxv(int,java.nio.IntBuffer) -> glLightModelxv
    void glLightf(int,int,float) -> glLightf
    void glLightfv(int,int,float[],int) -> glLightfv
    void glLightfv(int,int,java.nio.FloatBuffer) -> glLightfv
    void glLightx(int,int,int) -> glLightx
    void glLightxv(int,int,int[],int) -> glLightxv
    void glLightxv(int,int,java.nio.IntBuffer) -> glLightxv
    void glLineWidth(float) -> glLineWidth
    void glLineWidthx(int) -> glLineWidthx
    void glLoadIdentity() -> glLoadIdentity
    void glLoadMatrixf(float[],int) -> glLoadMatrixf
    void glLoadMatrixf(java.nio.FloatBuffer) -> glLoadMatrixf
    void glLoadMatrixx(int[],int) -> glLoadMatrixx
    void glLoadMatrixx(java.nio.IntBuffer) -> glLoadMatrixx
    void glLogicOp(int) -> glLogicOp
    void glMaterialf(int,int,float) -> glMaterialf
    void glMaterialfv(int,int,float[],int) -> glMaterialfv
    void glMaterialfv(int,int,java.nio.FloatBuffer) -> glMaterialfv
    void glMaterialx(int,int,int) -> glMaterialx
    void glMaterialxv(int,int,int[],int) -> glMaterialxv
    void glMaterialxv(int,int,java.nio.IntBuffer) -> glMaterialxv
    void glMatrixMode(int) -> glMatrixMode
    void glMultMatrixf(float[],int) -> glMultMatrixf
    void glMultMatrixf(java.nio.FloatBuffer) -> glMultMatrixf
    void glMultMatrixx(int[],int) -> glMultMatrixx
    void glMultMatrixx(java.nio.IntBuffer) -> glMultMatrixx
    void glMultiTexCoord4f(int,float,float,float,float) -> glMultiTexCoord4f
    void glMultiTexCoord4x(int,int,int,int,int) -> glMultiTexCoord4x
    void glNormal3f(float,float,float) -> glNormal3f
    void glNormal3x(int,int,int) -> glNormal3x
    void glNormalPointer(int,int,java.nio.Buffer) -> glNormalPointer
    void glOrthof(float,float,float,float,float,float) -> glOrthof
    void glOrthox(int,int,int,int,int,int) -> glOrthox
    void glPixelStorei(int,int) -> glPixelStorei
    void glPointSize(float) -> glPointSize
    void glPointSizex(int) -> glPointSizex
    void glPolygonOffset(float,float) -> glPolygonOffset
    void glPolygonOffsetx(int,int) -> glPolygonOffsetx
    void glPopMatrix() -> glPopMatrix
    void glPushMatrix() -> glPushMatrix
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> glReadPixels
    void glRotatef(float,float,float,float) -> glRotatef
    void glRotatex(int,int,int,int) -> glRotatex
    void glSampleCoverage(float,boolean) -> glSampleCoverage
    void glSampleCoveragex(int,boolean) -> glSampleCoveragex
    void glScalef(float,float,float) -> glScalef
    void glScalex(int,int,int) -> glScalex
    void glScissor(int,int,int,int) -> glScissor
    void glShadeModel(int) -> glShadeModel
    void glStencilFunc(int,int,int) -> glStencilFunc
    void glStencilMask(int) -> glStencilMask
    void glStencilOp(int,int,int) -> glStencilOp
    void glTexCoordPointer(int,int,int,java.nio.Buffer) -> glTexCoordPointer
    void glTexEnvf(int,int,float) -> glTexEnvf
    void glTexEnvfv(int,int,float[],int) -> glTexEnvfv
    void glTexEnvfv(int,int,java.nio.FloatBuffer) -> glTexEnvfv
    void glTexEnvx(int,int,int) -> glTexEnvx
    void glTexEnvxv(int,int,int[],int) -> glTexEnvxv
    void glTexEnvxv(int,int,java.nio.IntBuffer) -> glTexEnvxv
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glTexParameterx(int,int,int) -> glTexParameterx
    void glTexParameteriv(int,int,int[],int) -> glTexParameteriv
    void glTexParameteriv(int,int,java.nio.IntBuffer) -> glTexParameteriv
    void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage2D
    void glTranslatef(float,float,float) -> glTranslatef
    void glTranslatex(int,int,int) -> glTranslatex
    void glVertexPointer(int,int,int,java.nio.Buffer) -> glVertexPointer
    void glViewport(int,int,int,int) -> glViewport
    void glClipPlanef(int,float[],int) -> glClipPlanef
    void glClipPlanef(int,java.nio.FloatBuffer) -> glClipPlanef
    void glClipPlanex(int,int[],int) -> glClipPlanex
    void glClipPlanex(int,java.nio.IntBuffer) -> glClipPlanex
    void glDrawTexfOES(float,float,float,float,float) -> glDrawTexfOES
    void glDrawTexfvOES(float[],int) -> glDrawTexfvOES
    void glDrawTexfvOES(java.nio.FloatBuffer) -> glDrawTexfvOES
    void glDrawTexiOES(int,int,int,int,int) -> glDrawTexiOES
    void glDrawTexivOES(int[],int) -> glDrawTexivOES
    void glDrawTexivOES(java.nio.IntBuffer) -> glDrawTexivOES
    void glDrawTexsOES(short,short,short,short,short) -> glDrawTexsOES
    void glDrawTexsvOES(short[],int) -> glDrawTexsvOES
    void glDrawTexsvOES(java.nio.ShortBuffer) -> glDrawTexsvOES
    void glDrawTexxOES(int,int,int,int,int) -> glDrawTexxOES
    void glDrawTexxvOES(int[],int) -> glDrawTexxvOES
    void glDrawTexxvOES(java.nio.IntBuffer) -> glDrawTexxvOES
    int glQueryMatrixxOES(int[],int,int[],int) -> glQueryMatrixxOES
    int glQueryMatrixxOES(java.nio.IntBuffer,java.nio.IntBuffer) -> glQueryMatrixxOES
com.badlogic.gdx.backends.android.surfaceview.GLException -> com.badlogic.gdx.backends.android.a.e:
    int mError -> a
    java.lang.String getErrorString(int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper -> com.badlogic.gdx.backends.android.a.f:
    java.io.Writer mLog -> k
    boolean mLogArgumentNames -> l
    int mArgCount -> m
    com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo mColorPointer -> n
    com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo mNormalPointer -> o
    com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo mTexCoordPointer -> p
    com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo mVertexPointer -> q
    boolean mColorArrayEnabled -> a
    boolean mNormalArrayEnabled -> b
    boolean mTextureCoordArrayEnabled -> c
    boolean mVertexArrayEnabled -> d
    java.lang.StringBuilder mStringBuilder -> e
    void checkError() -> a
    void logLine(java.lang.String) -> a
    void log(java.lang.String) -> b
    void begin(java.lang.String) -> c
    void arg(java.lang.String,java.lang.String) -> a
    void end() -> b
    void flush() -> c
    void arg(java.lang.String,boolean) -> a
    void arg(java.lang.String,int) -> a
    void arg(java.lang.String,float) -> a
    void returns(java.lang.String) -> d
    void returns(int) -> a
    void arg(java.lang.String,int,int[],int) -> a
    void arg(java.lang.String,int,short[],int) -> a
    void arg(java.lang.String,int,float[],int) -> a
    void formattedAppend(java.lang.StringBuilder,int,int) -> a
    java.lang.String toString(int,int,int[],int) -> a
    java.lang.String toString(int,short[],int) -> a
    java.lang.String toString(int,float[],int) -> a
    java.lang.String toString(int,java.nio.FloatBuffer) -> a
    java.lang.String toString(int,int,java.nio.IntBuffer) -> a
    java.lang.String toString(int,java.nio.ShortBuffer) -> a
    void arg(java.lang.String,int,java.nio.FloatBuffer) -> a
    void arg(java.lang.String,int,java.nio.IntBuffer) -> a
    void arg(java.lang.String,int,java.nio.ShortBuffer) -> a
    void argPointer(int,int,int,java.nio.Buffer) -> a
    java.lang.String getHex(int) -> b
    java.lang.String getClearBufferMask(int) -> c
    java.lang.String getFactor(int) -> d
    java.lang.String getShadeModel(int) -> e
    java.lang.String getTextureTarget(int) -> f
    java.lang.String getTextureEnvTarget(int) -> g
    java.lang.String getTextureEnvPName(int) -> h
    int getTextureEnvParamCount(int) -> i
    java.lang.String getTextureEnvParamName(float) -> a
    java.lang.String getMatrixMode(int) -> j
    java.lang.String getClientState(int) -> k
    java.lang.String getCap(int) -> l
    java.lang.String getTexturePName(int) -> m
    java.lang.String getTextureParamName(float) -> b
    java.lang.String getFogPName(int) -> n
    int getFogParamCount(int) -> o
    java.lang.String getBeginMode(int) -> p
    java.lang.String getIndexType(int) -> q
    java.lang.String getIntegerStateName(int) -> r
    int getIntegerStateSize(int) -> s
    int getIntegerStateFormat(int) -> t
    java.lang.String getHintTarget(int) -> u
    java.lang.String getHintMode(int) -> v
    java.lang.String getFaceName(int) -> w
    java.lang.String getMaterialPName(int) -> x
    int getMaterialParamCount(int) -> y
    java.lang.String getLightName(int) -> z
    java.lang.String getLightPName(int) -> A
    int getLightParamCount(int) -> B
    java.lang.String getLightModelPName(int) -> C
    int getLightModelParamCount(int) -> D
    java.lang.String getPointerTypeName(int) -> E
    java.nio.ByteBuffer toByteBuffer(int,java.nio.Buffer) -> a
    char[] toCharIndices(int,int,java.nio.Buffer) -> a
    void doArrayElement(java.lang.StringBuilder,boolean,java.lang.String,com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo,int) -> a
    void doElement(java.lang.StringBuilder,int,int) -> b
    void bindArrays() -> d
    void unbindArrays() -> e
    void startLogIndices() -> f
    void endLogIndices() -> g
    void glActiveTexture(int) -> glActiveTexture
    void glAlphaFunc(int,float) -> glAlphaFunc
    void glAlphaFuncx(int,int) -> glAlphaFuncx
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glClearColorx(int,int,int,int) -> glClearColorx
    void glClearDepthf(float) -> glClearDepthf
    void glClearDepthx(int) -> glClearDepthx
    void glClearStencil(int) -> glClearStencil
    void glClientActiveTexture(int) -> glClientActiveTexture
    void glColor4f(float,float,float,float) -> glColor4f
    void glColor4x(int,int,int,int) -> glColor4x
    void glColorMask(boolean,boolean,boolean,boolean) -> glColorMask
    void glColorPointer(int,int,int,java.nio.Buffer) -> glColorPointer
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexSubImage2D
    void glCopyTexImage2D(int,int,int,int,int,int,int,int) -> glCopyTexImage2D
    void glCopyTexSubImage2D(int,int,int,int,int,int,int,int) -> glCopyTexSubImage2D
    void glCullFace(int) -> glCullFace
    void glDeleteTextures(int,int[],int) -> glDeleteTextures
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDepthFunc(int) -> glDepthFunc
    void glDepthMask(boolean) -> glDepthMask
    void glDepthRangef(float,float) -> glDepthRangef
    void glDepthRangex(int,int) -> glDepthRangex
    void glDisable(int) -> glDisable
    void glDisableClientState(int) -> glDisableClientState
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glEnable(int) -> glEnable
    void glEnableClientState(int) -> glEnableClientState
    void glFinish() -> glFinish
    void glFlush() -> glFlush
    void glFogf(int,float) -> glFogf
    void glFogfv(int,float[],int) -> glFogfv
    void glFogfv(int,java.nio.FloatBuffer) -> glFogfv
    void glFogx(int,int) -> glFogx
    void glFogxv(int,int[],int) -> glFogxv
    void glFogxv(int,java.nio.IntBuffer) -> glFogxv
    void glFrontFace(int) -> glFrontFace
    void glFrustumf(float,float,float,float,float,float) -> glFrustumf
    void glFrustumx(int,int,int,int,int,int) -> glFrustumx
    void glGenTextures(int,int[],int) -> glGenTextures
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    int glGetError() -> glGetError
    void glGetIntegerv(int,int[],int) -> glGetIntegerv
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    java.lang.String glGetString(int) -> glGetString
    void glHint(int,int) -> glHint
    void glLightModelf(int,float) -> glLightModelf
    void glLightModelfv(int,float[],int) -> glLightModelfv
    void glLightModelfv(int,java.nio.FloatBuffer) -> glLightModelfv
    void glLightModelx(int,int) -> glLightModelx
    void glLightModelxv(int,int[],int) -> glLightModelxv
    void glLightModelxv(int,java.nio.IntBuffer) -> glLightModelxv
    void glLightf(int,int,float) -> glLightf
    void glLightfv(int,int,float[],int) -> glLightfv
    void glLightfv(int,int,java.nio.FloatBuffer) -> glLightfv
    void glLightx(int,int,int) -> glLightx
    void glLightxv(int,int,int[],int) -> glLightxv
    void glLightxv(int,int,java.nio.IntBuffer) -> glLightxv
    void glLineWidth(float) -> glLineWidth
    void glLineWidthx(int) -> glLineWidthx
    void glLoadIdentity() -> glLoadIdentity
    void glLoadMatrixf(float[],int) -> glLoadMatrixf
    void glLoadMatrixf(java.nio.FloatBuffer) -> glLoadMatrixf
    void glLoadMatrixx(int[],int) -> glLoadMatrixx
    void glLoadMatrixx(java.nio.IntBuffer) -> glLoadMatrixx
    void glLogicOp(int) -> glLogicOp
    void glMaterialf(int,int,float) -> glMaterialf
    void glMaterialfv(int,int,float[],int) -> glMaterialfv
    void glMaterialfv(int,int,java.nio.FloatBuffer) -> glMaterialfv
    void glMaterialx(int,int,int) -> glMaterialx
    void glMaterialxv(int,int,int[],int) -> glMaterialxv
    void glMaterialxv(int,int,java.nio.IntBuffer) -> glMaterialxv
    void glMatrixMode(int) -> glMatrixMode
    void glMultMatrixf(float[],int) -> glMultMatrixf
    void glMultMatrixf(java.nio.FloatBuffer) -> glMultMatrixf
    void glMultMatrixx(int[],int) -> glMultMatrixx
    void glMultMatrixx(java.nio.IntBuffer) -> glMultMatrixx
    void glMultiTexCoord4f(int,float,float,float,float) -> glMultiTexCoord4f
    void glMultiTexCoord4x(int,int,int,int,int) -> glMultiTexCoord4x
    void glNormal3f(float,float,float) -> glNormal3f
    void glNormal3x(int,int,int) -> glNormal3x
    void glNormalPointer(int,int,java.nio.Buffer) -> glNormalPointer
    void glOrthof(float,float,float,float,float,float) -> glOrthof
    void glOrthox(int,int,int,int,int,int) -> glOrthox
    void glPixelStorei(int,int) -> glPixelStorei
    void glPointSize(float) -> glPointSize
    void glPointSizex(int) -> glPointSizex
    void glPolygonOffset(float,float) -> glPolygonOffset
    void glPolygonOffsetx(int,int) -> glPolygonOffsetx
    void glPopMatrix() -> glPopMatrix
    void glPushMatrix() -> glPushMatrix
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> glReadPixels
    void glRotatef(float,float,float,float) -> glRotatef
    void glRotatex(int,int,int,int) -> glRotatex
    void glSampleCoverage(float,boolean) -> glSampleCoverage
    void glSampleCoveragex(int,boolean) -> glSampleCoveragex
    void glScalef(float,float,float) -> glScalef
    void glScalex(int,int,int) -> glScalex
    void glScissor(int,int,int,int) -> glScissor
    void glShadeModel(int) -> glShadeModel
    void glStencilFunc(int,int,int) -> glStencilFunc
    void glStencilMask(int) -> glStencilMask
    void glStencilOp(int,int,int) -> glStencilOp
    void glTexCoordPointer(int,int,int,java.nio.Buffer) -> glTexCoordPointer
    void glTexEnvf(int,int,float) -> glTexEnvf
    void glTexEnvfv(int,int,float[],int) -> glTexEnvfv
    void glTexEnvfv(int,int,java.nio.FloatBuffer) -> glTexEnvfv
    void glTexEnvx(int,int,int) -> glTexEnvx
    void glTexEnvxv(int,int,int[],int) -> glTexEnvxv
    void glTexEnvxv(int,int,java.nio.IntBuffer) -> glTexEnvxv
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glTexParameterx(int,int,int) -> glTexParameterx
    void glTexParameteriv(int,int,int[],int) -> glTexParameteriv
    void glTexParameteriv(int,int,java.nio.IntBuffer) -> glTexParameteriv
    void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage2D
    void glTranslatef(float,float,float) -> glTranslatef
    void glTranslatex(int,int,int) -> glTranslatex
    void glVertexPointer(int,int,int,java.nio.Buffer) -> glVertexPointer
    void glViewport(int,int,int,int) -> glViewport
    void glClipPlanef(int,float[],int) -> glClipPlanef
    void glClipPlanef(int,java.nio.FloatBuffer) -> glClipPlanef
    void glClipPlanex(int,int[],int) -> glClipPlanex
    void glClipPlanex(int,java.nio.IntBuffer) -> glClipPlanex
    void glDrawTexfOES(float,float,float,float,float) -> glDrawTexfOES
    void glDrawTexfvOES(float[],int) -> glDrawTexfvOES
    void glDrawTexfvOES(java.nio.FloatBuffer) -> glDrawTexfvOES
    void glDrawTexiOES(int,int,int,int,int) -> glDrawTexiOES
    void glDrawTexivOES(int[],int) -> glDrawTexivOES
    void glDrawTexivOES(java.nio.IntBuffer) -> glDrawTexivOES
    void glDrawTexsOES(short,short,short,short,short) -> glDrawTexsOES
    void glDrawTexsvOES(short[],int) -> glDrawTexsvOES
    void glDrawTexsvOES(java.nio.ShortBuffer) -> glDrawTexsvOES
    void glDrawTexxOES(int,int,int,int,int) -> glDrawTexxOES
    void glDrawTexxvOES(int[],int) -> glDrawTexxvOES
    void glDrawTexxvOES(java.nio.IntBuffer) -> glDrawTexxvOES
    int glQueryMatrixxOES(int[],int,int[],int) -> glQueryMatrixxOES
    int glQueryMatrixxOES(java.nio.IntBuffer,java.nio.IntBuffer) -> glQueryMatrixxOES
    void glBindBuffer(int,int) -> glBindBuffer
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    void glColor4ub(byte,byte,byte,byte) -> glColor4ub
    void glDeleteBuffers(int,int[],int) -> glDeleteBuffers
    void glDeleteBuffers(int,java.nio.IntBuffer) -> glDeleteBuffers
    void glGenBuffers(int,int[],int) -> glGenBuffers
    void glGenBuffers(int,java.nio.IntBuffer) -> glGenBuffers
    void glGetBooleanv(int,boolean[],int) -> glGetBooleanv
    void glGetBooleanv(int,java.nio.IntBuffer) -> glGetBooleanv
    void glGetBufferParameteriv(int,int,int[],int) -> glGetBufferParameteriv
    void glGetBufferParameteriv(int,int,java.nio.IntBuffer) -> glGetBufferParameteriv
    void glGetClipPlanef(int,float[],int) -> glGetClipPlanef
    void glGetClipPlanef(int,java.nio.FloatBuffer) -> glGetClipPlanef
    void glGetClipPlanex(int,int[],int) -> glGetClipPlanex
    void glGetClipPlanex(int,java.nio.IntBuffer) -> glGetClipPlanex
    void glGetFixedv(int,int[],int) -> glGetFixedv
    void glGetFixedv(int,java.nio.IntBuffer) -> glGetFixedv
    void glGetFloatv(int,float[],int) -> glGetFloatv
    void glGetFloatv(int,java.nio.FloatBuffer) -> glGetFloatv
    void glGetLightfv(int,int,float[],int) -> glGetLightfv
    void glGetLightfv(int,int,java.nio.FloatBuffer) -> glGetLightfv
    void glGetLightxv(int,int,int[],int) -> glGetLightxv
    void glGetLightxv(int,int,java.nio.IntBuffer) -> glGetLightxv
    void glGetMaterialfv(int,int,float[],int) -> glGetMaterialfv
    void glGetMaterialfv(int,int,java.nio.FloatBuffer) -> glGetMaterialfv
    void glGetMaterialxv(int,int,int[],int) -> glGetMaterialxv
    void glGetMaterialxv(int,int,java.nio.IntBuffer) -> glGetMaterialxv
    void glGetTexEnviv(int,int,int[],int) -> glGetTexEnviv
    void glGetTexEnviv(int,int,java.nio.IntBuffer) -> glGetTexEnviv
    void glGetTexEnvxv(int,int,int[],int) -> glGetTexEnvxv
    void glGetTexEnvxv(int,int,java.nio.IntBuffer) -> glGetTexEnvxv
    void glGetTexParameterfv(int,int,float[],int) -> glGetTexParameterfv
    void glGetTexParameterfv(int,int,java.nio.FloatBuffer) -> glGetTexParameterfv
    void glGetTexParameteriv(int,int,int[],int) -> glGetTexParameteriv
    void glGetTexParameteriv(int,int,java.nio.IntBuffer) -> glGetTexParameteriv
    void glGetTexParameterxv(int,int,int[],int) -> glGetTexParameterxv
    void glGetTexParameterxv(int,int,java.nio.IntBuffer) -> glGetTexParameterxv
    boolean glIsBuffer(int) -> glIsBuffer
    boolean glIsEnabled(int) -> glIsEnabled
    boolean glIsTexture(int) -> glIsTexture
    void glPointParameterf(int,float) -> glPointParameterf
    void glPointParameterfv(int,float[],int) -> glPointParameterfv
    void glPointParameterfv(int,java.nio.FloatBuffer) -> glPointParameterfv
    void glPointParameterx(int,int) -> glPointParameterx
    void glPointParameterxv(int,int[],int) -> glPointParameterxv
    void glPointParameterxv(int,java.nio.IntBuffer) -> glPointParameterxv
    void glPointSizePointerOES(int,int,java.nio.Buffer) -> glPointSizePointerOES
    void glTexEnvi(int,int,int) -> glTexEnvi
    void glTexEnviv(int,int,int[],int) -> glTexEnviv
    void glTexEnviv(int,int,java.nio.IntBuffer) -> glTexEnviv
    void glTexParameterfv(int,int,float[],int) -> glTexParameterfv
    void glTexParameterfv(int,int,java.nio.FloatBuffer) -> glTexParameterfv
    void glTexParameteri(int,int,int) -> glTexParameteri
    void glTexParameterxv(int,int,int[],int) -> glTexParameterxv
    void glTexParameterxv(int,int,java.nio.IntBuffer) -> glTexParameterxv
com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo -> com.badlogic.gdx.backends.android.a.g:
    int mSize -> a
    int mType -> b
    int mStride -> c
    java.nio.Buffer mPointer -> d
    java.nio.ByteBuffer mTempByteBuffer -> e
    com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper this$0 -> f
    int sizeof(int) -> a
    int getStride() -> a
    void bindByteBuffer() -> b
    void unbindByteBuffer() -> c
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 -> com.badlogic.gdx.backends.android.a.h:
    java.lang.String TAG -> a
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> b
    void onMeasure(int,int) -> onMeasure
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
    void init(boolean,int,int) -> a
    void checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1 -> com.badlogic.gdx.backends.android.a.i:
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 this$0 -> a
    boolean deleteSurroundingText(int,int) -> deleteSurroundingText
    void sendDownUpKeyEventForBackwardCompatibility(int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser -> com.badlogic.gdx.backends.android.a.j:
    int EGL_OPENGL_ES2_BIT -> g
    int[] s_configAttribs2 -> h
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int[] mValue -> i
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory -> com.badlogic.gdx.backends.android.a.k:
    int EGL_CONTEXT_CLIENT_VERSION -> a
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> createContext
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> destroyContext
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 -> com.badlogic.gdx.backends.android.a.l:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> a
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager sGLThreadManager -> b
    java.lang.ref.WeakReference mThisWeakRef -> c
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread mGLThread -> d
    android.opengl.GLSurfaceView$Renderer mRenderer -> e
    boolean mDetached -> f
    android.opengl.GLSurfaceView$EGLConfigChooser mEGLConfigChooser -> g
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory mEGLContextFactory -> h
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory mEGLWindowSurfaceFactory -> i
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper mGLWrapper -> j
    int mDebugFlags -> k
    int mEGLContextClientVersion -> l
    boolean mPreserveEGLContextOnPause -> m
    void onMeasure(int,int) -> onMeasure
    void finalize() -> finalize
    void init() -> e
    void setGLWrapper(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper) -> setGLWrapper
    void setDebugFlags(int) -> setDebugFlags
    int getDebugFlags() -> getDebugFlags
    void setPreserveEGLContextOnPause(boolean) -> setPreserveEGLContextOnPause
    boolean getPreserveEGLContextOnPause() -> getPreserveEGLContextOnPause
    void setRenderer(android.opengl.GLSurfaceView$Renderer) -> setRenderer
    void setEGLContextFactory(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory) -> setEGLContextFactory
    void setEGLWindowSurfaceFactory(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory) -> setEGLWindowSurfaceFactory
    void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser) -> setEGLConfigChooser
    void setEGLConfigChooser(boolean) -> setEGLConfigChooser
    void setEGLConfigChooser(int,int,int,int,int,int) -> a
    void setEGLContextClientVersion(int) -> setEGLContextClientVersion
    void setRenderMode(int) -> setRenderMode
    int getRenderMode() -> getRenderMode
    void requestRender() -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void onPause() -> b
    void onResume() -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void checkRenderThreadState() -> f
    int access$200(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> a
    android.opengl.GLSurfaceView$EGLConfigChooser access$300(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> b
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory access$400(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> c
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory access$500(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> d
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper access$600(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> e
    int access$700(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> f
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager access$800() -> d
    boolean access$900(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> g
    android.opengl.GLSurfaceView$Renderer access$1000(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> h
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$1 -> com.badlogic.gdx.backends.android.a.m:
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$BaseConfigChooser -> com.badlogic.gdx.backends.android.a.n:
    int[] mConfigSpec -> a
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0 -> b
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int[] filterConfigSpec(int[]) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$ComponentSizeChooser -> com.badlogic.gdx.backends.android.a.o:
    int[] mValue -> j
    int mRedSize -> c
    int mGreenSize -> d
    int mBlueSize -> e
    int mAlphaSize -> f
    int mDepthSize -> g
    int mStencilSize -> h
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0 -> i
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultContextFactory -> com.badlogic.gdx.backends.android.a.p:
    int EGL_CONTEXT_CLIENT_VERSION -> b
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0 -> a
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultWindowSurfaceFactory -> com.badlogic.gdx.backends.android.a.q:
    javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object) -> a
    void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory -> com.badlogic.gdx.backends.android.a.r:
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory -> com.badlogic.gdx.backends.android.a.s:
    javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object) -> a
    void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper -> com.badlogic.gdx.backends.android.a.t:
    java.lang.ref.WeakReference mGLSurfaceViewWeakRef -> f
    javax.microedition.khronos.egl.EGL10 mEgl -> a
    javax.microedition.khronos.egl.EGLDisplay mEglDisplay -> b
    javax.microedition.khronos.egl.EGLSurface mEglSurface -> c
    javax.microedition.khronos.egl.EGLConfig mEglConfig -> d
    javax.microedition.khronos.egl.EGLContext mEglContext -> e
    void start() -> a
    boolean createSurface() -> b
    javax.microedition.khronos.opengles.GL createGL() -> c
    int swap() -> d
    void destroySurface() -> e
    void destroySurfaceImp() -> g
    void finish() -> f
    void throwEglException(java.lang.String) -> a
    void throwEglException(java.lang.String,int) -> a
    void logEglErrorAsWarning(java.lang.String,java.lang.String,int) -> a
    java.lang.String formatEglError(java.lang.String,int) -> b
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread -> com.badlogic.gdx.backends.android.a.u:
    boolean mShouldExit -> a
    boolean mExited -> b
    boolean mRequestPaused -> c
    boolean mPaused -> d
    boolean mHasSurface -> e
    boolean mSurfaceIsBad -> f
    boolean mWaitingForSurface -> g
    boolean mHaveEglContext -> h
    boolean mHaveEglSurface -> i
    boolean mFinishedCreatingEglSurface -> j
    boolean mShouldReleaseEglContext -> k
    int mWidth -> l
    int mHeight -> m
    int mRenderMode -> n
    boolean mRequestRender -> o
    boolean mRenderComplete -> p
    java.util.ArrayList mEventQueue -> q
    boolean mSizeChanged -> r
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper mEglHelper -> s
    java.lang.ref.WeakReference mGLSurfaceViewWeakRef -> t
    void run() -> run
    void stopEglSurfaceLocked() -> j
    void stopEglContextLocked() -> k
    void guardedRun() -> l
    boolean ableToDraw() -> a
    boolean readyToDraw() -> m
    void setRenderMode(int) -> a
    int getRenderMode() -> b
    void requestRender() -> c
    void surfaceCreated() -> d
    void surfaceDestroyed() -> e
    void onPause() -> f
    void onResume() -> g
    void onWindowResize(int,int) -> a
    void requestExitAndWait() -> h
    void requestReleaseEglContextLocked() -> i
    boolean access$1102(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread,boolean) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager -> com.badlogic.gdx.backends.android.a.v:
    java.lang.String TAG -> a
    boolean mGLESVersionCheckComplete -> b
    int mGLESVersion -> c
    boolean mGLESDriverCheckComplete -> d
    boolean mMultipleGLESContextsAllowed -> e
    boolean mLimitedGLESContexts -> f
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread mEglOwner -> g
    void threadExiting(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread) -> a
    boolean tryAcquireEglContextLocked(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread) -> b
    void releaseEglContextLocked(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread) -> c
    boolean shouldReleaseEGLContextWhenPausing() -> a
    boolean shouldTerminateEGLWhenPausing() -> b
    void checkGLDriver(javax.microedition.khronos.opengles.GL10) -> a
    void checkGLESVersion() -> c
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper -> com.badlogic.gdx.backends.android.a.w:
    javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$LogWriter -> com.badlogic.gdx.backends.android.a.x:
    java.lang.StringBuilder mBuilder -> a
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$SimpleEGLConfigChooser -> com.badlogic.gdx.backends.android.a.y:
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0 -> j
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake -> com.badlogic.gdx.backends.android.a.z:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> a
    java.lang.Object sEglLock -> b
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLThread mGLThread -> e
    android.opengl.GLSurfaceView$EGLConfigChooser mEGLConfigChooser -> c
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLWrapper mGLWrapper -> d
    int mDebugFlags -> f
    int mRenderMode -> g
    android.opengl.GLSurfaceView$Renderer mRenderer -> h
    int mSurfaceWidth -> i
    int mSurfaceHeight -> j
    boolean mHasSurface -> k
    void onMeasure(int,int) -> onMeasure
    void init() -> d
    void setGLWrapper(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLWrapper) -> setGLWrapper
    void setDebugFlags(int) -> setDebugFlags
    int getDebugFlags() -> getDebugFlags
    void setRenderer(android.opengl.GLSurfaceView$Renderer) -> setRenderer
    void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser) -> setEGLConfigChooser
    void setEGLConfigChooser(boolean) -> setEGLConfigChooser
    void setEGLConfigChooser(int,int,int,int,int,int) -> a
    void setRenderMode(int) -> setRenderMode
    int getRenderMode() -> getRenderMode
    void requestRender() -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void onPause() -> b
    void onResume() -> c
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$BaseConfigChooser -> com.badlogic.gdx.backends.android.a.aa:
    int[] mConfigSpec -> a
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$ComponentSizeChooser -> com.badlogic.gdx.backends.android.a.ab:
    int[] mValue -> h
    int mRedSize -> b
    int mGreenSize -> c
    int mBlueSize -> d
    int mAlphaSize -> e
    int mDepthSize -> f
    int mStencilSize -> g
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$EglHelper -> com.badlogic.gdx.backends.android.a.ac:
    javax.microedition.khronos.egl.EGL10 mEgl -> a
    javax.microedition.khronos.egl.EGLDisplay mEglDisplay -> b
    javax.microedition.khronos.egl.EGLSurface mEglSurface -> c
    javax.microedition.khronos.egl.EGLConfig mEglConfig -> d
    javax.microedition.khronos.egl.EGLContext mEglContext -> e
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake this$0 -> f
    void start() -> a
    javax.microedition.khronos.opengles.GL createSurface(android.view.SurfaceHolder) -> a
    boolean swap() -> b
    void finish() -> c
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLThread -> com.badlogic.gdx.backends.android.a.ad:
    boolean mDone -> b
    boolean mPaused -> c
    boolean mHasSurface -> d
    int mWidth -> e
    int mHeight -> f
    int mRenderMode -> g
    boolean mRequestRender -> h
    android.opengl.GLSurfaceView$Renderer mRenderer -> i
    java.util.ArrayList mEventQueue -> j
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$EglHelper mEglHelper -> k
    boolean mSizeChanged -> l
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake this$0 -> a
    void run() -> run
    void guardedRun() -> g
    boolean needToWait() -> h
    void setRenderMode(int) -> a
    void requestRender() -> a
    void surfaceCreated() -> b
    void surfaceDestroyed() -> c
    void onPause() -> d
    void onResume() -> e
    void onWindowResize(int,int) -> a
    void requestExitAndWait() -> f
    java.lang.Runnable getEvent() -> i
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLWrapper -> com.badlogic.gdx.backends.android.a.ae:
    javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$SimpleEGLConfigChooser -> com.badlogic.gdx.backends.android.a.af:
com.badlogic.gdx.backends.android.surfaceview.GLWrapperBase -> com.badlogic.gdx.backends.android.a.ag:
    javax.microedition.khronos.opengles.GL10 mgl -> f
    javax.microedition.khronos.opengles.GL10Ext mgl10Ext -> g
    javax.microedition.khronos.opengles.GL11 mgl11 -> h
    javax.microedition.khronos.opengles.GL11Ext mgl11Ext -> i
    javax.microedition.khronos.opengles.GL11ExtensionPack mgl11ExtensionPack -> j
    void glGetPointerv(int,java.nio.Buffer[]) -> glGetPointerv
    void glColorPointer(int,int,int,int) -> glColorPointer
    void glNormalPointer(int,int,int) -> glNormalPointer
    void glTexCoordPointer(int,int,int,int) -> glTexCoordPointer
    void glVertexPointer(int,int,int,int) -> glVertexPointer
    void glDrawElements(int,int,int,int) -> glDrawElements
    void glBindBuffer(int,int) -> glBindBuffer
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    void glColor4ub(byte,byte,byte,byte) -> glColor4ub
    void glDeleteBuffers(int,int[],int) -> glDeleteBuffers
    void glDeleteBuffers(int,java.nio.IntBuffer) -> glDeleteBuffers
    void glGenBuffers(int,int[],int) -> glGenBuffers
    void glGenBuffers(int,java.nio.IntBuffer) -> glGenBuffers
    void glGetBooleanv(int,boolean[],int) -> glGetBooleanv
    void glGetBooleanv(int,java.nio.IntBuffer) -> glGetBooleanv
    void glGetBufferParameteriv(int,int,int[],int) -> glGetBufferParameteriv
    void glGetBufferParameteriv(int,int,java.nio.IntBuffer) -> glGetBufferParameteriv
    void glGetClipPlanef(int,float[],int) -> glGetClipPlanef
    void glGetClipPlanef(int,java.nio.FloatBuffer) -> glGetClipPlanef
    void glGetClipPlanex(int,int[],int) -> glGetClipPlanex
    void glGetClipPlanex(int,java.nio.IntBuffer) -> glGetClipPlanex
    void glGetFixedv(int,int[],int) -> glGetFixedv
    void glGetFixedv(int,java.nio.IntBuffer) -> glGetFixedv
    void glGetFloatv(int,float[],int) -> glGetFloatv
    void glGetFloatv(int,java.nio.FloatBuffer) -> glGetFloatv
    void glGetLightfv(int,int,float[],int) -> glGetLightfv
    void glGetLightfv(int,int,java.nio.FloatBuffer) -> glGetLightfv
    void glGetLightxv(int,int,int[],int) -> glGetLightxv
    void glGetLightxv(int,int,java.nio.IntBuffer) -> glGetLightxv
    void glGetMaterialfv(int,int,float[],int) -> glGetMaterialfv
    void glGetMaterialfv(int,int,java.nio.FloatBuffer) -> glGetMaterialfv
    void glGetMaterialxv(int,int,int[],int) -> glGetMaterialxv
    void glGetMaterialxv(int,int,java.nio.IntBuffer) -> glGetMaterialxv
    void glGetTexEnviv(int,int,int[],int) -> glGetTexEnviv
    void glGetTexEnviv(int,int,java.nio.IntBuffer) -> glGetTexEnviv
    void glGetTexEnvxv(int,int,int[],int) -> glGetTexEnvxv
    void glGetTexEnvxv(int,int,java.nio.IntBuffer) -> glGetTexEnvxv
    void glGetTexParameterfv(int,int,float[],int) -> glGetTexParameterfv
    void glGetTexParameterfv(int,int,java.nio.FloatBuffer) -> glGetTexParameterfv
    void glGetTexParameteriv(int,int,int[],int) -> glGetTexParameteriv
    void glGetTexParameteriv(int,int,java.nio.IntBuffer) -> glGetTexParameteriv
    void glGetTexParameterxv(int,int,int[],int) -> glGetTexParameterxv
    void glGetTexParameterxv(int,int,java.nio.IntBuffer) -> glGetTexParameterxv
    boolean glIsBuffer(int) -> glIsBuffer
    boolean glIsEnabled(int) -> glIsEnabled
    boolean glIsTexture(int) -> glIsTexture
    void glPointParameterf(int,float) -> glPointParameterf
    void glPointParameterfv(int,float[],int) -> glPointParameterfv
    void glPointParameterfv(int,java.nio.FloatBuffer) -> glPointParameterfv
    void glPointParameterx(int,int) -> glPointParameterx
    void glPointParameterxv(int,int[],int) -> glPointParameterxv
    void glPointParameterxv(int,java.nio.IntBuffer) -> glPointParameterxv
    void glPointSizePointerOES(int,int,java.nio.Buffer) -> glPointSizePointerOES
    void glTexEnvi(int,int,int) -> glTexEnvi
    void glTexEnviv(int,int,int[],int) -> glTexEnviv
    void glTexEnviv(int,int,java.nio.IntBuffer) -> glTexEnviv
    void glTexParameterfv(int,int,float[],int) -> glTexParameterfv
    void glTexParameterfv(int,int,java.nio.FloatBuffer) -> glTexParameterfv
    void glTexParameteri(int,int,int) -> glTexParameteri
    void glTexParameterxv(int,int,int[],int) -> glTexParameterxv
    void glTexParameterxv(int,int,java.nio.IntBuffer) -> glTexParameterxv
    void glCurrentPaletteMatrixOES(int) -> glCurrentPaletteMatrixOES
    void glLoadPaletteFromModelViewMatrixOES() -> glLoadPaletteFromModelViewMatrixOES
    void glMatrixIndexPointerOES(int,int,int,java.nio.Buffer) -> glMatrixIndexPointerOES
    void glMatrixIndexPointerOES(int,int,int,int) -> glMatrixIndexPointerOES
    void glWeightPointerOES(int,int,int,java.nio.Buffer) -> glWeightPointerOES
    void glWeightPointerOES(int,int,int,int) -> glWeightPointerOES
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser -> com.badlogic.gdx.backends.android.a.ah:
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int mNumSamples -> g
    boolean mUseGL20 -> h
    int[] mConfigAttribs -> i
    int[] mValue -> j
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy -> com.badlogic.gdx.backends.android.a.ai:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension -> com.badlogic.gdx.backends.android.a.aj:
    int width -> a
    int height -> b
com.badlogic.gdx.files.FileHandle -> com.badlogic.gdx.c.a:
    java.io.File file -> b
    com.badlogic.gdx.Files$FileType type -> c
    java.lang.String path() -> d
    java.lang.String name() -> e
    java.lang.String extension() -> f
    com.badlogic.gdx.Files$FileType type() -> g
    java.io.File file() -> h
    java.io.InputStream read() -> b
    byte[] readBytes() -> i
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle parent() -> a
    long length() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.Camera -> com.badlogic.gdx.graphics.a:
    com.badlogic.gdx.math.Vector3 position -> a
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 up -> c
    com.badlogic.gdx.math.Matrix4 projection -> d
    com.badlogic.gdx.math.Matrix4 view -> e
    com.badlogic.gdx.math.Matrix4 combined -> f
    com.badlogic.gdx.math.Matrix4 invProjectionView -> g
    float near -> h
    float far -> i
    float viewportWidth -> j
    float viewportHeight -> k
    com.badlogic.gdx.math.Frustum frustum -> l
    com.badlogic.gdx.math.Vector3 tmpVec -> n
    com.badlogic.gdx.math.collision.Ray ray -> m
com.badlogic.gdx.graphics.Color -> com.badlogic.gdx.graphics.b:
    com.badlogic.gdx.graphics.Color CLEAR -> a
    com.badlogic.gdx.graphics.Color WHITE -> b
    com.badlogic.gdx.graphics.Color BLACK -> c
    com.badlogic.gdx.graphics.Color RED -> d
    com.badlogic.gdx.graphics.Color GREEN -> e
    com.badlogic.gdx.graphics.Color BLUE -> f
    com.badlogic.gdx.graphics.Color LIGHT_GRAY -> g
    com.badlogic.gdx.graphics.Color GRAY -> h
    com.badlogic.gdx.graphics.Color DARK_GRAY -> i
    com.badlogic.gdx.graphics.Color PINK -> j
    com.badlogic.gdx.graphics.Color ORANGE -> k
    com.badlogic.gdx.graphics.Color YELLOW -> l
    com.badlogic.gdx.graphics.Color MAGENTA -> m
    com.badlogic.gdx.graphics.Color CYAN -> n
    com.badlogic.gdx.graphics.Color tmp -> o
    float r -> p
    float g -> q
    float b -> r
    float a -> s
    com.badlogic.gdx.graphics.Color set(com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.graphics.Color clamp() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    float toFloatBits() -> b
    int toIntBits() -> c
    java.lang.String toString() -> toString
    int rgba8888(float,float,float,float) -> a
com.badlogic.gdx.graphics.GL10 -> com.badlogic.gdx.graphics.c:
    void glClientActiveTexture(int) -> a
    void glColorPointer(int,int,int,java.nio.Buffer) -> a
    void glDisableClientState(int) -> b
    void glEnableClientState(int) -> c
    void glLoadMatrixf(float[],int) -> a
    void glMatrixMode(int) -> d
    void glNormalPointer(int,int,java.nio.Buffer) -> a
    void glTexCoordPointer(int,int,int,java.nio.Buffer) -> b
    void glVertexPointer(int,int,int,java.nio.Buffer) -> c
com.badlogic.gdx.graphics.GL11 -> com.badlogic.gdx.graphics.d:
    void glBindBuffer(int,int) -> a
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData(int,int,int,java.nio.Buffer) -> d
    void glDeleteBuffers(int,java.nio.IntBuffer) -> a
    void glGenBuffers(int,java.nio.IntBuffer) -> b
    void glVertexPointer(int,int,int,int) -> c
    void glColorPointer(int,int,int,int) -> a
    void glNormalPointer(int,int,int) -> a
    void glTexCoordPointer(int,int,int,int) -> b
    void glDrawElements(int,int,int,int) -> d
com.badlogic.gdx.graphics.GL20 -> com.badlogic.gdx.graphics.e:
    void glAttachShader(int,int) -> glAttachShader
    void glBindBuffer(int,int) -> glBindBuffer
    void glBindFramebuffer(int,int) -> glBindFramebuffer
    void glBindRenderbuffer(int,int) -> glBindRenderbuffer
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    int glCheckFramebufferStatus(int) -> glCheckFramebufferStatus
    void glCompileShader(int) -> glCompileShader
    int glCreateProgram() -> glCreateProgram
    int glCreateShader(int) -> glCreateShader
    void glDeleteBuffers(int,java.nio.IntBuffer) -> glDeleteBuffers
    void glDeleteFramebuffers(int,java.nio.IntBuffer) -> glDeleteFramebuffers
    void glDeleteProgram(int) -> glDeleteProgram
    void glDeleteRenderbuffers(int,java.nio.IntBuffer) -> glDeleteRenderbuffers
    void glDeleteShader(int) -> glDeleteShader
    void glDisableVertexAttribArray(int) -> glDisableVertexAttribArray
    void glDrawElements(int,int,int,int) -> glDrawElements
    void glEnableVertexAttribArray(int) -> glEnableVertexAttribArray
    void glFramebufferRenderbuffer(int,int,int,int) -> glFramebufferRenderbuffer
    void glFramebufferTexture2D(int,int,int,int,int) -> glFramebufferTexture2D
    void glGenBuffers(int,java.nio.IntBuffer) -> glGenBuffers
    void glGenerateMipmap(int) -> glGenerateMipmap
    void glGenFramebuffers(int,java.nio.IntBuffer) -> glGenFramebuffers
    void glGenRenderbuffers(int,java.nio.IntBuffer) -> glGenRenderbuffers
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveAttrib
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveUniform
    int glGetAttribLocation(int,java.lang.String) -> glGetAttribLocation
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> glGetProgramiv
    java.lang.String glGetProgramInfoLog(int) -> glGetProgramInfoLog
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> glGetShaderiv
    java.lang.String glGetShaderInfoLog(int) -> glGetShaderInfoLog
    int glGetUniformLocation(int,java.lang.String) -> glGetUniformLocation
    void glLinkProgram(int) -> glLinkProgram
    void glRenderbufferStorage(int,int,int,int) -> glRenderbufferStorage
    void glShaderSource(int,java.lang.String) -> glShaderSource
    void glUniform1i(int,int) -> glUniform1i
    void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4fv
    void glUseProgram(int) -> glUseProgram
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> glVertexAttribPointer
com.badlogic.gdx.graphics.GLCommon -> com.badlogic.gdx.graphics.f:
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDepthMask(boolean) -> glDepthMask
    void glDisable(int) -> glDisable
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glEnable(int) -> glEnable
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    java.lang.String glGetString(int) -> glGetString
    void glPixelStorei(int,int) -> glPixelStorei
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
com.badlogic.gdx.graphics.GLTexture -> com.badlogic.gdx.graphics.g:
    int glTarget -> a
    int glHandle -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> e
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> f
    boolean enforcePotImages -> g
    java.nio.IntBuffer buffer -> h
    void bind() -> a
    com.badlogic.gdx.graphics.Texture$TextureFilter getMinFilter() -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter getMagFilter() -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap getUWrap() -> e
    com.badlogic.gdx.graphics.Texture$TextureWrap getVWrap() -> f
    int getTextureObjectHandle() -> g
    void setWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap) -> a
    void setFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter) -> a
    void delete() -> h
    void dispose() -> c
    com.badlogic.gdx.graphics.TextureData createTextureData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap$Format,boolean) -> a
    int createGLHandle() -> i
    void uploadImageData(int,com.badlogic.gdx.graphics.TextureData) -> a
com.badlogic.gdx.graphics.Mesh -> com.badlogic.gdx.graphics.h:
    java.util.Map meshes -> a
    boolean forceVBO -> b
    com.badlogic.gdx.graphics.glutils.VertexData vertices -> c
    com.badlogic.gdx.graphics.glutils.IndexData indices -> d
    boolean autoBind -> e
    boolean isVertexArray -> f
    com.badlogic.gdx.math.Vector3 tmpV -> g
    com.badlogic.gdx.graphics.Mesh setVertices(float[],int,int) -> a
    com.badlogic.gdx.graphics.Mesh setIndices(short[]) -> a
    void bind() -> a
    void unbind() -> b
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> b
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void render(int,int,int) -> a
    void render(int,int,int,boolean) -> a
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int) -> a
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int,boolean) -> a
    void dispose() -> c
    java.nio.ShortBuffer getIndicesBuffer() -> d
    void addManagedMesh(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Mesh) -> a
    void invalidateAllMeshes(com.badlogic.gdx.Application) -> a
    void clearAllMeshes(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> e
com.badlogic.gdx.graphics.Mesh$VertexDataType -> com.badlogic.gdx.graphics.i:
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexArray -> a
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObject -> b
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectSubData -> c
    com.badlogic.gdx.graphics.Mesh$VertexDataType[] $VALUES -> d
    com.badlogic.gdx.graphics.Mesh$VertexDataType[] values() -> values
    com.badlogic.gdx.graphics.Mesh$VertexDataType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.OrthographicCamera -> com.badlogic.gdx.graphics.j:
    float zoom -> n
    com.badlogic.gdx.math.Vector3 tmp -> o
    void update() -> a
    void update(boolean) -> a
    void setToOrtho(boolean,float,float) -> a
com.badlogic.gdx.graphics.Pixmap -> com.badlogic.gdx.graphics.k:
    com.badlogic.gdx.graphics.Pixmap$Blending blending -> c
    com.badlogic.gdx.graphics.g2d.Gdx2DPixmap pixmap -> a
    int color -> b
    boolean disposed -> d
    void setBlending(com.badlogic.gdx.graphics.Pixmap$Blending) -> a
    void setColor(float,float,float,float) -> a
    void fill() -> a
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int,int,int) -> a
    int getWidth() -> b
    int getHeight() -> d
    void dispose() -> c
    int getGLFormat() -> e
    int getGLInternalFormat() -> f
    int getGLType() -> g
    java.nio.ByteBuffer getPixels() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    com.badlogic.gdx.graphics.Pixmap$Blending getBlending() -> j
com.badlogic.gdx.graphics.Pixmap$Blending -> com.badlogic.gdx.graphics.l:
    com.badlogic.gdx.graphics.Pixmap$Blending None -> a
    com.badlogic.gdx.graphics.Pixmap$Blending SourceOver -> b
    com.badlogic.gdx.graphics.Pixmap$Blending[] $VALUES -> c
    com.badlogic.gdx.graphics.Pixmap$Blending[] values() -> values
    com.badlogic.gdx.graphics.Pixmap$Blending valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.Pixmap$Format -> com.badlogic.gdx.graphics.m:
    com.badlogic.gdx.graphics.Pixmap$Format Alpha -> a
    com.badlogic.gdx.graphics.Pixmap$Format Intensity -> b
    com.badlogic.gdx.graphics.Pixmap$Format LuminanceAlpha -> c
    com.badlogic.gdx.graphics.Pixmap$Format RGB565 -> d
    com.badlogic.gdx.graphics.Pixmap$Format RGBA4444 -> e
    com.badlogic.gdx.graphics.Pixmap$Format RGB888 -> f
    com.badlogic.gdx.graphics.Pixmap$Format RGBA8888 -> g
    com.badlogic.gdx.graphics.Pixmap$Format[] $VALUES -> h
    com.badlogic.gdx.graphics.Pixmap$Format[] values() -> values
    com.badlogic.gdx.graphics.Pixmap$Format valueOf(java.lang.String) -> valueOf
    int toGdx2DPixmapFormat(com.badlogic.gdx.graphics.Pixmap$Format) -> a
    com.badlogic.gdx.graphics.Pixmap$Format fromGdx2DPixmapFormat(int) -> a
com.badlogic.gdx.graphics.PixmapIO -> com.badlogic.gdx.graphics.n:
    com.badlogic.gdx.graphics.Pixmap readCIM(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.graphics.PixmapIO$CIM -> com.badlogic.gdx.graphics.o:
    byte[] writeBuffer -> a
    byte[] readBuffer -> b
    com.badlogic.gdx.graphics.Pixmap read(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.graphics.Texture -> com.badlogic.gdx.graphics.p:
    com.badlogic.gdx.assets.AssetManager assetManager -> i
    java.util.Map managedTextures -> g
    com.badlogic.gdx.graphics.TextureData data -> h
    void load(com.badlogic.gdx.graphics.TextureData) -> a
    void reload() -> j
    int getWidth() -> k
    int getHeight() -> l
    com.badlogic.gdx.graphics.TextureData getTextureData() -> m
    boolean isManaged() -> n
    void dispose() -> c
    void addManagedTexture(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Texture) -> a
    void clearAllTextures(com.badlogic.gdx.Application) -> a
    void invalidateAllTextures(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> o
com.badlogic.gdx.graphics.Texture$1 -> com.badlogic.gdx.graphics.q:
    int val$refCount -> a
    void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class) -> a
com.badlogic.gdx.graphics.Texture$TextureFilter -> com.badlogic.gdx.graphics.r:
    com.badlogic.gdx.graphics.Texture$TextureFilter Nearest -> a
    com.badlogic.gdx.graphics.Texture$TextureFilter Linear -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMap -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestNearest -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearNearest -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestLinear -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearLinear -> g
    int glEnum -> h
    com.badlogic.gdx.graphics.Texture$TextureFilter[] $VALUES -> i
    com.badlogic.gdx.graphics.Texture$TextureFilter[] values() -> values
    com.badlogic.gdx.graphics.Texture$TextureFilter valueOf(java.lang.String) -> valueOf
    int getGLEnum() -> a
com.badlogic.gdx.graphics.Texture$TextureWrap -> com.badlogic.gdx.graphics.s:
    com.badlogic.gdx.graphics.Texture$TextureWrap MirroredRepeat -> a
    com.badlogic.gdx.graphics.Texture$TextureWrap ClampToEdge -> b
    com.badlogic.gdx.graphics.Texture$TextureWrap Repeat -> c
    int glEnum -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap[] $VALUES -> e
    com.badlogic.gdx.graphics.Texture$TextureWrap[] values() -> values
    com.badlogic.gdx.graphics.Texture$TextureWrap valueOf(java.lang.String) -> valueOf
    int getGLEnum() -> a
com.badlogic.gdx.graphics.TextureData -> com.badlogic.gdx.graphics.t:
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    boolean isPrepared() -> b
    void prepare() -> c
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> d
    boolean disposePixmap() -> e
    void consumeCompressedData(int) -> a
    int getWidth() -> f
    int getHeight() -> g
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> h
    boolean useMipMaps() -> i
    boolean isManaged() -> j
com.badlogic.gdx.graphics.TextureData$TextureDataType -> com.badlogic.gdx.graphics.u:
    com.badlogic.gdx.graphics.TextureData$TextureDataType Pixmap -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType Compressed -> b
    com.badlogic.gdx.graphics.TextureData$TextureDataType Float -> c
    com.badlogic.gdx.graphics.TextureData$TextureDataType[] $VALUES -> d
    com.badlogic.gdx.graphics.TextureData$TextureDataType[] values() -> values
    com.badlogic.gdx.graphics.TextureData$TextureDataType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.VertexAttribute -> com.badlogic.gdx.graphics.v:
    int usage -> a
    int numComponents -> b
    int offset -> c
    java.lang.String alias -> d
    int unit -> e
    int usageIndex -> f
    boolean equals(java.lang.Object) -> equals
    boolean equals(com.badlogic.gdx.graphics.VertexAttribute) -> a
com.badlogic.gdx.graphics.VertexAttributes -> com.badlogic.gdx.graphics.w:
    com.badlogic.gdx.graphics.VertexAttribute[] attributes -> b
    int vertexSize -> a
    long mask -> c
    int calculateOffsets() -> b
    void checkValidity() -> c
    int size() -> a
    com.badlogic.gdx.graphics.VertexAttribute get(int) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.graphics.g2d.Animation -> com.badlogic.gdx.graphics.g2d.a:
    com.badlogic.gdx.graphics.g2d.TextureRegion[] keyFrames -> a
    float frameDuration -> b
    float animationDuration -> c
    int playMode -> d
    com.badlogic.gdx.graphics.g2d.TextureRegion getKeyFrame(float,boolean) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getKeyFrame(float) -> a
    int getKeyFrameIndex(float) -> b
com.badlogic.gdx.graphics.g2d.BitmapFont -> com.badlogic.gdx.graphics.g2d.b:
    char[] xChars -> a
    char[] capChars -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion[] regions -> d
    com.badlogic.gdx.graphics.g2d.BitmapFontCache cache -> e
    boolean flipped -> f
    boolean integer -> g
    boolean ownsTexture -> h
    void load(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,java.lang.CharSequence,float,float) -> a
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setScale(float,float) -> a
    void setScale(float) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion[] getRegions() -> a
    void dispose() -> c
    boolean usesIntegerPositions() -> b
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData -> com.badlogic.gdx.graphics.g2d.c:
    java.lang.String imagePath -> a
    java.lang.String[] imagePaths -> b
    com.badlogic.gdx.files.FileHandle fontFile -> c
    boolean flipped -> d
    float lineHeight -> e
    float capHeight -> f
    float ascent -> g
    float descent -> h
    float down -> i
    float scaleX -> j
    float scaleY -> k
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph[][] glyphs -> l
    float spaceWidth -> m
    float xHeight -> n
    void setGlyph(int,com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getFirstGlyph() -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getGlyph(char) -> a
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph -> com.badlogic.gdx.graphics.g2d.d:
    int id -> a
    int srcX -> b
    int srcY -> c
    int width -> d
    int height -> e
    float u -> f
    float v -> g
    float u2 -> h
    float v2 -> i
    int xoffset -> j
    int yoffset -> k
    int xadvance -> l
    byte[][] kerning -> m
    int page -> n
    int getKerning(char) -> a
    void setKerning(int,int) -> a
com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds -> com.badlogic.gdx.graphics.g2d.e:
    float width -> a
    float height -> b
com.badlogic.gdx.graphics.g2d.BitmapFontCache -> com.badlogic.gdx.graphics.g2d.f:
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> a
    float[][] vertexData -> b
    int[] idx -> c
    int[] tmpGlyphCount -> d
    float x -> e
    float y -> f
    float color -> g
    com.badlogic.gdx.graphics.Color tempColor -> h
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds textBounds -> i
    boolean integer -> j
    int glyphCount -> k
    com.badlogic.gdx.utils.IntArray[] glyphIndices -> l
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> a
    void clear() -> a
    void requireSequence(java.lang.CharSequence,int,int) -> a
    void require(int,int) -> a
    float addToCache(java.lang.CharSequence,float,float,int,int) -> b
    void addGlyph(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,float,float,float,float) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds addText(java.lang.CharSequence,float,float,int,int) -> a
    void setUseIntegerPositions(boolean) -> a
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap -> com.badlogic.gdx.graphics.g2d.Gdx2DPixmap:
    long basePtr -> a
    int width -> b
    int height -> c
    int format -> d
    java.nio.ByteBuffer pixelPtr -> e
    long[] nativeData -> f
    void dispose() -> c
    void clear(int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int,int,int) -> a
    java.nio.ByteBuffer getPixels() -> a
    int getHeight() -> b
    int getWidth() -> d
    int getFormat() -> e
    int getGLInternalFormat() -> f
    int getGLFormat() -> g
    int getGLType() -> h
    java.nio.ByteBuffer load(long[],byte[],int,int,int) -> load
    java.nio.ByteBuffer newPixmap(long[],int,int,int) -> newPixmap
    void free(long) -> free
    void clear(long,int) -> clear
    void drawPixmap(long,long,int,int,int,int,int,int,int,int) -> drawPixmap
    void setBlend(int) -> setBlend
    void setScale(int) -> setScale
    java.lang.String getFailureReason() -> getFailureReason
com.badlogic.gdx.graphics.g2d.SpriteBatch -> com.badlogic.gdx.graphics.g2d.g:
    com.badlogic.gdx.graphics.Mesh mesh -> e
    com.badlogic.gdx.graphics.Mesh[] buffers -> f
    int currBufferIdx -> g
    float[] vertices -> h
    int idx -> i
    com.badlogic.gdx.graphics.Texture lastTexture -> j
    float invTexWidth -> k
    float invTexHeight -> l
    boolean drawing -> m
    com.badlogic.gdx.math.Matrix4 transformMatrix -> n
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> o
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> p
    boolean blendingDisabled -> q
    int blendSrcFunc -> r
    int blendDstFunc -> s
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> t
    com.badlogic.gdx.graphics.glutils.ShaderProgram customShader -> u
    boolean ownsShader -> v
    float color -> a
    com.badlogic.gdx.graphics.Color tempColor -> w
    int renderCalls -> b
    int totalRenderCalls -> c
    int maxSpritesInBatch -> d
    com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader() -> a
    void begin() -> b
    void end() -> d
    void draw(com.badlogic.gdx.graphics.Texture,float,float) -> a
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float) -> a
    void flush() -> e
    void disableBlending() -> f
    void enableBlending() -> g
    void dispose() -> c
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void setupMatrices() -> i
    void switchTexture(com.badlogic.gdx.graphics.Texture) -> a
    boolean isBlendingEnabled() -> h
com.badlogic.gdx.graphics.g2d.TextureAtlas -> com.badlogic.gdx.graphics.g2d.h:
    java.lang.String[] tuple -> a
    java.util.HashSet textures -> c
    java.util.Comparator indexComparator -> b
    void dispose() -> c
com.badlogic.gdx.graphics.g2d.TextureAtlas$1 -> com.badlogic.gdx.graphics.g2d.i:
    int compare(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region,com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion -> com.badlogic.gdx.graphics.g2d.j:
    float offsetX -> a
    float offsetY -> b
    int packedHeight -> c
    int originalHeight -> d
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData -> com.badlogic.gdx.graphics.g2d.k:
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region -> com.badlogic.gdx.graphics.g2d.l:
    int index -> a
com.badlogic.gdx.graphics.g2d.TextureRegion -> com.badlogic.gdx.graphics.g2d.m:
    com.badlogic.gdx.graphics.Texture texture -> e
    float u -> f
    float v -> g
    float u2 -> h
    float v2 -> i
    int regionWidth -> j
    int regionHeight -> k
    void setRegion(int,int,int,int) -> a
    void setRegion(float,float,float,float) -> a
    com.badlogic.gdx.graphics.Texture getTexture() -> a
    int getRegionX() -> b
    int getRegionY() -> c
    int getRegionWidth() -> d
    int getRegionHeight() -> e
    com.badlogic.gdx.graphics.g2d.TextureRegion[][] split(int,int) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion[][] split(com.badlogic.gdx.graphics.Texture,int,int) -> a
com.badlogic.gdx.graphics.glutils.ETC1 -> com.badlogic.gdx.graphics.glutils.ETC1:
    int PKM_HEADER_SIZE -> a
    int ETC1_RGB8_OES -> b
    int getPixelSize(com.badlogic.gdx.graphics.Pixmap$Format) -> a
    com.badlogic.gdx.graphics.Pixmap decodeImage(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,com.badlogic.gdx.graphics.Pixmap$Format) -> a
    int getWidthPKM(java.nio.ByteBuffer,int) -> getWidthPKM
    int getHeightPKM(java.nio.ByteBuffer,int) -> getHeightPKM
    boolean isValidPKM(java.nio.ByteBuffer,int) -> isValidPKM
    void decodeImage(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int) -> decodeImage
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data -> com.badlogic.gdx.graphics.glutils.a:
    int width -> a
    int height -> b
    java.nio.ByteBuffer compressedData -> c
    int dataOffset -> d
    void checkNPOT() -> b
    boolean hasPKMHeader() -> a
    void dispose() -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.glutils.ETC1TextureData -> com.badlogic.gdx.graphics.glutils.b:
    com.badlogic.gdx.files.FileHandle file -> a
    com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data data -> b
    boolean useMipMaps -> c
    int width -> d
    int height -> e
    boolean isPrepared -> f
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    boolean isPrepared() -> b
    void prepare() -> c
    void consumeCompressedData(int) -> a
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> d
    boolean disposePixmap() -> e
    int getWidth() -> f
    int getHeight() -> g
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> h
    boolean useMipMaps() -> i
    boolean isManaged() -> j
com.badlogic.gdx.graphics.glutils.FileTextureData -> com.badlogic.gdx.graphics.glutils.c:
    boolean copyToPOT -> a
    com.badlogic.gdx.files.FileHandle file -> b
    int width -> c
    int height -> d
    com.badlogic.gdx.graphics.Pixmap$Format format -> e
    com.badlogic.gdx.graphics.Pixmap pixmap -> f
    boolean useMipMaps -> g
    boolean isPrepared -> h
    boolean isPrepared() -> b
    void prepare() -> c
    com.badlogic.gdx.graphics.Pixmap ensurePot(com.badlogic.gdx.graphics.Pixmap) -> a
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> d
    boolean disposePixmap() -> e
    int getWidth() -> f
    int getHeight() -> g
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> h
    boolean useMipMaps() -> i
    boolean isManaged() -> j
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    void consumeCompressedData(int) -> a
com.badlogic.gdx.graphics.glutils.FrameBuffer -> com.badlogic.gdx.graphics.glutils.d:
    java.util.Map buffers -> f
    com.badlogic.gdx.graphics.Texture colorTexture -> a
    int defaultFramebufferHandle -> g
    boolean defaultFramebufferHandleInitialized -> h
    int framebufferHandle -> i
    int depthbufferHandle -> j
    int width -> b
    int height -> c
    boolean hasDepth -> d
    com.badlogic.gdx.graphics.Pixmap$Format format -> e
    void setupTexture() -> a
    void build() -> d
    void dispose() -> c
    void invalidateAllFrameBuffers(com.badlogic.gdx.Application) -> a
    void clearAllFrameBuffers(com.badlogic.gdx.Application) -> b
    java.lang.StringBuilder getManagedStatus(java.lang.StringBuilder) -> a
    java.lang.String getManagedStatus() -> b
com.badlogic.gdx.graphics.glutils.IndexArray -> com.badlogic.gdx.graphics.glutils.e:
    java.nio.IntBuffer tmpHandle -> a
    java.nio.ShortBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    int getNumIndices() -> a
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> b
    void bind() -> d
    void unbind() -> e
    void invalidate() -> f
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.IndexBufferObject -> com.badlogic.gdx.graphics.glutils.f:
    java.nio.IntBuffer tmpHandle -> a
    java.nio.ShortBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    int bufferHandle -> d
    boolean isDirect -> e
    boolean isDirty -> f
    boolean isBound -> g
    int usage -> h
    int createBufferObject() -> g
    int getNumIndices() -> a
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> b
    void bind() -> d
    void unbind() -> e
    void invalidate() -> f
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.g:
    java.nio.IntBuffer tmpHandle -> a
    java.nio.ShortBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    int bufferHandle -> d
    boolean isDirect -> e
    boolean isDirty -> f
    boolean isBound -> g
    int usage -> h
    int createBufferObject() -> g
    int getNumIndices() -> a
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> b
    void bind() -> d
    void unbind() -> e
    void invalidate() -> f
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.IndexData -> com.badlogic.gdx.graphics.glutils.h:
    int getNumIndices() -> a
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> b
    void bind() -> d
    void unbind() -> e
    void invalidate() -> f
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.MipMapGenerator -> com.badlogic.gdx.graphics.glutils.i:
    boolean useHWMipMap -> a
    void generateMipMap(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> a
    void generateMipMapGLES20(int,com.badlogic.gdx.graphics.Pixmap) -> a
    void generateMipMapDesktop(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> b
    void generateMipMapCPU(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> c
com.badlogic.gdx.graphics.glutils.PixmapTextureData -> com.badlogic.gdx.graphics.glutils.j:
    com.badlogic.gdx.graphics.Pixmap pixmap -> a
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    boolean useMipMaps -> c
    boolean disposePixmap -> d
    boolean disposePixmap() -> e
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> d
    int getWidth() -> f
    int getHeight() -> g
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> h
    boolean useMipMaps() -> i
    boolean isManaged() -> j
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    void consumeCompressedData(int) -> a
    boolean isPrepared() -> b
    void prepare() -> c
com.badlogic.gdx.graphics.glutils.ShaderProgram -> com.badlogic.gdx.graphics.glutils.k:
    boolean pedantic -> a
    com.badlogic.gdx.utils.ObjectMap shaders -> e
    java.lang.String log -> f
    boolean isCompiled -> g
    com.badlogic.gdx.utils.ObjectIntMap uniforms -> h
    com.badlogic.gdx.utils.ObjectIntMap uniformTypes -> i
    com.badlogic.gdx.utils.ObjectIntMap uniformSizes -> j
    java.lang.String[] uniformNames -> k
    com.badlogic.gdx.utils.ObjectIntMap attributes -> l
    com.badlogic.gdx.utils.ObjectIntMap attributeTypes -> m
    com.badlogic.gdx.utils.ObjectIntMap attributeSizes -> n
    java.lang.String[] attributeNames -> o
    int program -> p
    int vertexShaderHandle -> q
    int fragmentShaderHandle -> r
    java.nio.FloatBuffer matrix -> s
    java.lang.String vertexShaderSource -> t
    java.lang.String fragmentShaderSource -> u
    boolean invalidated -> v
    java.nio.ByteBuffer buffer -> w
    java.nio.FloatBuffer floatBuffer -> x
    java.nio.IntBuffer intBuffer -> y
    int refCount -> z
    java.nio.IntBuffer intbuf -> b
    java.nio.IntBuffer params -> c
    java.nio.IntBuffer type -> d
    void compileShaders(java.lang.String,java.lang.String) -> a
    int loadShader(int,java.lang.String) -> a
    int linkProgram() -> g
    java.lang.String getLog() -> a
    boolean isCompiled() -> b
    int fetchAttributeLocation(java.lang.String) -> c
    int fetchUniformLocation(java.lang.String) -> d
    int fetchUniformLocation(java.lang.String,boolean) -> a
    void setUniformi(java.lang.String,int) -> a
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4) -> a
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4,boolean) -> a
    void setVertexAttribute(int,int,int,boolean,int,java.nio.Buffer) -> a
    void setVertexAttribute(int,int,int,boolean,int,int) -> a
    void begin() -> d
    void end() -> e
    void dispose() -> c
    void disableVertexAttribute(java.lang.String) -> a
    void disableVertexAttribute(int) -> a
    void enableVertexAttribute(int) -> b
    void checkManaged() -> h
    void addManagedShader(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void invalidateAllShaderPrograms(com.badlogic.gdx.Application) -> a
    void clearAllShaderPrograms(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> f
    void fetchUniforms() -> i
    void fetchAttributes() -> j
    int getAttributeLocation(java.lang.String) -> b
com.badlogic.gdx.graphics.glutils.VertexArray -> com.badlogic.gdx.graphics.glutils.l:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    boolean isBound -> d
    void dispose() -> c
    void setVertices(float[],int,int) -> a
    void bind() -> a
    void unbind() -> b
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
com.badlogic.gdx.graphics.glutils.VertexBufferObject -> com.badlogic.gdx.graphics.glutils.m:
    java.nio.IntBuffer tmpHandle -> a
    com.badlogic.gdx.graphics.VertexAttributes attributes -> b
    java.nio.FloatBuffer buffer -> c
    java.nio.ByteBuffer byteBuffer -> d
    int bufferHandle -> e
    boolean isStatic -> f
    int usage -> g
    boolean isDirty -> h
    boolean isBound -> i
    int createBufferObject() -> e
    void setVertices(float[],int,int) -> a
    void bind() -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind() -> b
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> d
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.n:
    java.nio.IntBuffer tmpHandle -> a
    com.badlogic.gdx.graphics.VertexAttributes attributes -> b
    java.nio.FloatBuffer buffer -> c
    java.nio.ByteBuffer byteBuffer -> d
    int bufferHandle -> e
    boolean isDirect -> f
    boolean isStatic -> g
    int usage -> h
    boolean isDirty -> i
    boolean isBound -> j
    int createBufferObject() -> d
    void setVertices(float[],int,int) -> a
    void bind() -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind() -> b
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.VertexData -> com.badlogic.gdx.graphics.glutils.o:
    void setVertices(float[],int,int) -> a
    void bind() -> a
    void unbind() -> b
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void dispose() -> c
com.badlogic.gdx.input.GestureDetector -> com.badlogic.gdx.d.a:
    com.badlogic.gdx.input.GestureDetector$GestureListener listener -> a
    float tapSquareSize -> d
    long tapCountInterval -> e
    float longPressSeconds -> f
    long maxFlingDelay -> g
    boolean inTapSquare -> h
    int tapCount -> i
    long lastTapTime -> j
    float lastTapX -> k
    float lastTapY -> l
    int lastTapButton -> m
    int lastTapPointer -> n
    boolean longPressFired -> b
    boolean pinching -> o
    boolean panning -> p
    com.badlogic.gdx.input.GestureDetector$VelocityTracker tracker -> q
    float tapSquareCenterX -> r
    float tapSquareCenterY -> s
    long gestureStartTime -> t
    com.badlogic.gdx.math.Vector2 pointer1 -> c
    com.badlogic.gdx.math.Vector2 pointer2 -> u
    com.badlogic.gdx.math.Vector2 initialPointer1 -> v
    com.badlogic.gdx.math.Vector2 initialPointer2 -> w
    com.badlogic.gdx.utils.Timer$Task longPressTask -> x
    boolean touchDown(int,int,int,int) -> a
    boolean touchDown(float,float,int,int) -> a
    boolean touchDragged(int,int,int) -> a
    boolean touchDragged(float,float,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchUp(float,float,int,int) -> b
    boolean isWithinTapSquare(float,float,float,float) -> a
com.badlogic.gdx.input.GestureDetector$1 -> com.badlogic.gdx.d.b:
    com.badlogic.gdx.input.GestureDetector this$0 -> a
    void run() -> run
com.badlogic.gdx.input.GestureDetector$GestureAdapter -> com.badlogic.gdx.d.c:
    boolean touchDown(float,float,int,int) -> a
    boolean tap(float,float,int,int) -> b
    boolean longPress(float,float) -> a
    boolean fling(float,float,int) -> a
    boolean pan(float,float,float,float) -> a
    boolean panStop(float,float,int,int) -> c
    boolean zoom(float,float) -> b
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
com.badlogic.gdx.input.GestureDetector$GestureListener -> com.badlogic.gdx.d.d:
    boolean touchDown(float,float,int,int) -> a
    boolean tap(float,float,int,int) -> b
    boolean longPress(float,float) -> a
    boolean fling(float,float,int) -> a
    boolean pan(float,float,float,float) -> a
    boolean panStop(float,float,int,int) -> c
    boolean zoom(float,float) -> b
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
com.badlogic.gdx.input.GestureDetector$VelocityTracker -> com.badlogic.gdx.d.e:
    int sampleSize -> a
    float lastX -> b
    float lastY -> c
    float deltaX -> d
    float deltaY -> e
    long lastTime -> f
    int numSamples -> g
    float[] meanX -> h
    float[] meanY -> i
    long[] meanTime -> j
    void start(float,float,long) -> a
    void update(float,float,long) -> b
    float getVelocityX() -> a
    float getVelocityY() -> b
    float getAverage(float[],int) -> a
    long getAverage(long[],int) -> a
com.badlogic.gdx.math.Frustum -> com.badlogic.gdx.math.a:
    com.badlogic.gdx.math.Vector3[] clipSpacePlanePoints -> a
    float[] clipSpacePlanePointsArray -> b
    com.badlogic.gdx.math.Plane[] planes -> c
    com.badlogic.gdx.math.Vector3[] planePoints -> d
    float[] planePointsArray -> e
    void update(com.badlogic.gdx.math.Matrix4) -> a
com.badlogic.gdx.math.Intersector -> com.badlogic.gdx.math.b:
    com.badlogic.gdx.math.Vector3 v0 -> h
    com.badlogic.gdx.math.Vector3 v1 -> i
    com.badlogic.gdx.math.Vector3 v2 -> j
    com.badlogic.gdx.math.Plane p -> k
    com.badlogic.gdx.math.Vector3 i -> l
    com.badlogic.gdx.math.Vector3 dir -> m
    com.badlogic.gdx.math.Vector3 start -> n
    com.badlogic.gdx.math.Vector3 best -> a
    com.badlogic.gdx.math.Vector3 tmp -> b
    com.badlogic.gdx.math.Vector3 tmp1 -> c
    com.badlogic.gdx.math.Vector3 tmp2 -> d
    com.badlogic.gdx.math.Vector3 tmp3 -> e
    com.badlogic.gdx.math.Vector2 v2tmp -> f
    com.badlogic.gdx.math.Vector3 intersection -> g
    boolean overlapConvexPolygons(com.badlogic.gdx.math.Polygon,com.badlogic.gdx.math.Polygon) -> a
    boolean overlapConvexPolygons(com.badlogic.gdx.math.Polygon,com.badlogic.gdx.math.Polygon,com.badlogic.gdx.math.Intersector$MinimumTranslationVector) -> a
    boolean overlapConvexPolygons(float[],float[],com.badlogic.gdx.math.Intersector$MinimumTranslationVector) -> a
    boolean overlapConvexPolygons(float[],int,int,float[],int,int,com.badlogic.gdx.math.Intersector$MinimumTranslationVector) -> a
com.badlogic.gdx.math.Intersector$MinimumTranslationVector -> com.badlogic.gdx.math.c:
    com.badlogic.gdx.math.Vector2 normal -> a
    float depth -> b
com.badlogic.gdx.math.MathUtils -> com.badlogic.gdx.math.d:
    int ATAN2_DIM -> a
    float INV_ATAN2_DIM_MINUS_1 -> c
    java.util.Random random -> b
    float sinDeg(float) -> a
    float cosDeg(float) -> b
    int random(int) -> a
    int nextPowerOfTwo(int) -> b
    boolean isPowerOfTwo(int) -> c
com.badlogic.gdx.math.MathUtils$Sin -> com.badlogic.gdx.math.e:
    float[] table -> a
com.badlogic.gdx.math.Matrix4 -> com.badlogic.gdx.math.Matrix4:
    float[] tmp -> a
    float[] val -> b
    com.badlogic.gdx.math.Quaternion quat -> c
    com.badlogic.gdx.math.Vector3 l_vez -> d
    com.badlogic.gdx.math.Vector3 l_vex -> e
    com.badlogic.gdx.math.Vector3 l_vey -> f
    com.badlogic.gdx.math.Vector3 tmpVec -> g
    com.badlogic.gdx.math.Matrix4 tmpMat -> h
    com.badlogic.gdx.math.Vector3 right -> i
    com.badlogic.gdx.math.Vector3 tmpForward -> j
    com.badlogic.gdx.math.Vector3 tmpUp -> k
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix4) -> a
    com.badlogic.gdx.math.Matrix4 set(float[]) -> a
    com.badlogic.gdx.math.Matrix4 mul(com.badlogic.gdx.math.Matrix4) -> b
    com.badlogic.gdx.math.Matrix4 idt() -> a
    com.badlogic.gdx.math.Matrix4 setToOrtho2D(float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToOrtho(float,float,float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToTranslation(com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    java.lang.String toString() -> toString
    void mul(float[],float[]) -> mul
    void prj(float[],float[],int,int,int) -> prj
    boolean inv(float[]) -> inv
com.badlogic.gdx.math.Plane -> com.badlogic.gdx.math.f:
    com.badlogic.gdx.math.Vector3 normal -> a
    float d -> b
    void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.math.Polygon -> com.badlogic.gdx.math.g:
    float[] localVertices -> a
    float[] worldVertices -> b
    float x -> c
    float y -> d
    float originX -> e
    float originY -> f
    float rotation -> g
    float scaleX -> h
    float scaleY -> i
    boolean dirty -> j
    float[] getTransformedVertices() -> a
    void setPosition(float,float) -> a
    void setRotation(float) -> a
com.badlogic.gdx.math.Quaternion -> com.badlogic.gdx.math.h:
    com.badlogic.gdx.math.Quaternion tmp1 -> e
    com.badlogic.gdx.math.Quaternion tmp2 -> f
    float x -> a
    float y -> b
    float z -> c
    float w -> d
    com.badlogic.gdx.math.Quaternion set(float,float,float,float) -> a
    java.lang.String toString() -> toString
    com.badlogic.gdx.math.Quaternion idt() -> a
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.Vector2 -> com.badlogic.gdx.math.i:
    com.badlogic.gdx.math.Vector2 X -> a
    com.badlogic.gdx.math.Vector2 Y -> b
    com.badlogic.gdx.math.Vector2 Zero -> c
    float x -> d
    float y -> e
    com.badlogic.gdx.math.Vector2 set(com.badlogic.gdx.math.Vector2) -> a
    com.badlogic.gdx.math.Vector2 set(float,float) -> a
    float dst(com.badlogic.gdx.math.Vector2) -> b
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.Vector3 -> com.badlogic.gdx.math.j:
    float x -> a
    float y -> b
    float z -> c
    com.badlogic.gdx.math.Vector3 tmp -> d
    com.badlogic.gdx.math.Vector3 tmp2 -> e
    com.badlogic.gdx.math.Vector3 tmp3 -> f
    com.badlogic.gdx.math.Vector3 X -> g
    com.badlogic.gdx.math.Vector3 Y -> h
    com.badlogic.gdx.math.Vector3 Z -> i
    com.badlogic.gdx.math.Vector3 Zero -> j
    com.badlogic.gdx.math.Matrix4 tmpMat -> k
    com.badlogic.gdx.math.Vector3 set(float,float,float) -> a
    com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Vector3 tmp() -> a
    com.badlogic.gdx.math.Vector3 tmp2() -> b
    com.badlogic.gdx.math.Vector3 add(com.badlogic.gdx.math.Vector3) -> b
    com.badlogic.gdx.math.Vector3 add(float,float,float) -> b
    com.badlogic.gdx.math.Vector3 sub(com.badlogic.gdx.math.Vector3) -> c
    com.badlogic.gdx.math.Vector3 sub(float,float,float) -> c
    com.badlogic.gdx.math.Vector3 scl(float) -> a
    float len2() -> c
    com.badlogic.gdx.math.Vector3 nor() -> d
    float dot(com.badlogic.gdx.math.Vector3) -> d
    com.badlogic.gdx.math.Vector3 crs(com.badlogic.gdx.math.Vector3) -> e
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.WindowedMean -> com.badlogic.gdx.math.k:
    float[] values -> a
    int added_values -> b
    int last_value -> c
    float mean -> d
    boolean dirty -> e
    boolean hasEnoughData() -> a
    void clear() -> b
    void addValue(float) -> a
    float getMean() -> c
com.badlogic.gdx.math.collision.Ray -> com.badlogic.gdx.math.a.a:
    com.badlogic.gdx.math.Vector3 origin -> a
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 tmp -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.net.NetJavaImpl -> com.badlogic.gdx.e.a:
    java.util.concurrent.ExecutorService executorService -> a
com.badlogic.gdx.utils.Array -> com.badlogic.gdx.utils.a:
    java.lang.Object[] items -> a
    int size -> b
    boolean ordered -> c
    com.badlogic.gdx.utils.Array$ArrayIterable iterable -> d
    void add(java.lang.Object) -> a
    void addAll(com.badlogic.gdx.utils.Array) -> a
    void addAll(com.badlogic.gdx.utils.Array,int,int) -> a
    void addAll(java.lang.Object[],int,int) -> a
    java.lang.Object get(int) -> a
    boolean contains(java.lang.Object,boolean) -> a
    boolean removeValue(java.lang.Object,boolean) -> b
    java.lang.Object removeIndex(int) -> b
    java.lang.Object pop() -> a
    void clear() -> b
    java.lang.Object[] resize(int) -> c
    java.util.Iterator iterator() -> iterator
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.Array$ArrayIterable -> com.badlogic.gdx.utils.b:
    com.badlogic.gdx.utils.Array array -> a
    boolean allowRemove -> b
    com.badlogic.gdx.utils.Array$ArrayIterator iterator1 -> c
    com.badlogic.gdx.utils.Array$ArrayIterator iterator2 -> d
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.Array$ArrayIterator -> com.badlogic.gdx.utils.c:
    com.badlogic.gdx.utils.Array array -> c
    boolean allowRemove -> d
    int index -> a
    boolean valid -> b
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.BufferUtils -> com.badlogic.gdx.utils.BufferUtils:
    com.badlogic.gdx.utils.Array unsafeBuffers -> a
    int allocatedUnsafe -> b
    void copy(float[],java.nio.Buffer,int,int) -> a
    java.nio.FloatBuffer newFloatBuffer(int) -> a
    java.nio.ByteBuffer newByteBuffer(int) -> b
    java.nio.IntBuffer newIntBuffer(int) -> c
    void disposeUnsafeByteBuffer(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer newUnsafeByteBuffer(int) -> d
    void freeMemory(java.nio.ByteBuffer) -> freeMemory
    java.nio.ByteBuffer newDisposableByteBuffer(int) -> newDisposableByteBuffer
    void copyJni(float[],java.nio.Buffer,int,int) -> copyJni
com.badlogic.gdx.utils.Disposable -> com.badlogic.gdx.utils.d:
    void dispose() -> c
com.badlogic.gdx.utils.GdxNativesLoader -> com.badlogic.gdx.utils.e:
    boolean disableNativesLoading -> a
    boolean nativesLoaded -> b
    void load() -> a
com.badlogic.gdx.utils.GdxRuntimeException -> com.badlogic.gdx.utils.f:
com.badlogic.gdx.utils.IntArray -> com.badlogic.gdx.utils.g:
    int[] items -> a
    int size -> b
    boolean ordered -> c
    void add(int) -> a
    void clear() -> a
    int[] ensureCapacity(int) -> b
    int[] resize(int) -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IntMap -> com.badlogic.gdx.utils.h:
    int size -> a
    int[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    java.lang.Object zeroValue -> f
    boolean hasZeroValue -> g
    float loadFactor -> h
    int hashShift -> i
    int mask -> j
    int threshold -> k
    int stashCapacity -> l
    int pushIterations -> m
    java.lang.Object put(int,java.lang.Object) -> a
    void putResize(int,java.lang.Object) -> b
    void push(int,java.lang.Object,int,int,int,int,int,int) -> a
    void putStash(int,java.lang.Object) -> c
    java.lang.Object remove(int) -> a
    java.lang.Object removeStash(int) -> b
    void removeStashIndex(int) -> c
    void resize(int) -> d
    int hash2(int) -> e
    int hash3(int) -> f
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.Logger -> com.badlogic.gdx.utils.i:
    java.lang.String tag -> a
    int level -> b
    void debug(java.lang.String) -> a
    void info(java.lang.String) -> b
    void error(java.lang.String,java.lang.Throwable) -> a
    int getLevel() -> a
com.badlogic.gdx.utils.NumberUtils -> com.badlogic.gdx.utils.j:
    boolean intToFloatColorMask -> a
    int floatToIntBits(float) -> a
    float intToFloatColor(int) -> a
com.badlogic.gdx.utils.ObjectIntMap -> com.badlogic.gdx.utils.k:
    int size -> a
    java.lang.Object[] keyTable -> b
    int[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    float loadFactor -> f
    int hashShift -> g
    int mask -> h
    int threshold -> i
    int stashCapacity -> j
    int pushIterations -> k
    void put(java.lang.Object,int) -> a
    void putResize(java.lang.Object,int) -> c
    void push(java.lang.Object,int,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    void putStash(java.lang.Object,int) -> d
    int get(java.lang.Object,int) -> b
    int getStash(java.lang.Object,int) -> e
    void clear() -> a
    void resize(int) -> a
    int hash2(int) -> b
    int hash3(int) -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectMap -> com.badlogic.gdx.utils.l:
    int size -> a
    java.lang.Object[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    float loadFactor -> f
    int hashShift -> g
    int mask -> h
    int threshold -> i
    int stashCapacity -> j
    int pushIterations -> k
    com.badlogic.gdx.utils.ObjectMap$Entries entries1 -> l
    com.badlogic.gdx.utils.ObjectMap$Entries entries2 -> m
    com.badlogic.gdx.utils.ObjectMap$Keys keys1 -> n
    com.badlogic.gdx.utils.ObjectMap$Keys keys2 -> o
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object put_internal(java.lang.Object,java.lang.Object) -> b
    void putResize(java.lang.Object,java.lang.Object) -> c
    void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    void putStash(java.lang.Object,java.lang.Object) -> d
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object getStash(java.lang.Object) -> e
    java.lang.Object remove(java.lang.Object) -> b
    java.lang.Object removeStash(java.lang.Object) -> c
    void removeStashIndex(int) -> a
    void clear() -> a
    boolean containsKey(java.lang.Object) -> d
    boolean containsKeyStash(java.lang.Object) -> f
    void resize(int) -> b
    int hash2(int) -> c
    int hash3(int) -> d
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> b
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> c
com.badlogic.gdx.utils.ObjectMap$Entries -> com.badlogic.gdx.utils.m:
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> a
    com.badlogic.gdx.utils.ObjectMap$Entry next() -> a
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    void reset() -> b
    java.lang.Object next() -> next
com.badlogic.gdx.utils.ObjectMap$Entry -> com.badlogic.gdx.utils.n:
    java.lang.Object key -> a
    java.lang.Object value -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectMap$Keys -> com.badlogic.gdx.utils.o:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.Array toArray() -> a
    void remove() -> remove
    void reset() -> b
com.badlogic.gdx.utils.ObjectMap$MapIterator -> com.badlogic.gdx.utils.p:
    boolean hasNext -> b
    com.badlogic.gdx.utils.ObjectMap map -> c
    int nextIndex -> d
    int currentIndex -> e
    boolean valid -> f
    void reset() -> b
    void advance() -> c
    void remove() -> remove
com.badlogic.gdx.utils.Pool -> com.badlogic.gdx.utils.q:
    int max -> a
    int peak -> b
    com.badlogic.gdx.utils.Array freeObjects -> c
    java.lang.Object newObject() -> a
    java.lang.Object obtain() -> b
    void free(java.lang.Object) -> a
com.badlogic.gdx.utils.Pool$Poolable -> com.badlogic.gdx.utils.r:
    void reset() -> a
com.badlogic.gdx.utils.SharedLibraryLoader -> com.badlogic.gdx.utils.s:
    boolean isWindows -> a
    boolean isLinux -> b
    boolean isMac -> c
    boolean isIos -> d
    boolean isAndroid -> e
    boolean is64Bit -> f
    java.util.HashSet loadedLibraries -> g
    java.lang.String nativesJar -> h
    java.lang.String crc(java.io.InputStream) -> a
    java.lang.String mapLibraryName(java.lang.String) -> a
    void load(java.lang.String) -> b
    java.io.InputStream readFile(java.lang.String) -> c
    java.io.File extractFile(java.lang.String,java.lang.String,java.io.File) -> a
    void loadFile(java.lang.String) -> d
    java.lang.Throwable loadFile(java.lang.String,java.lang.String,java.io.File) -> b
com.badlogic.gdx.utils.StreamUtils -> com.badlogic.gdx.utils.t:
    byte[] EMPTY_BYTES -> a
    void closeQuietly(java.io.Closeable) -> a
com.badlogic.gdx.utils.StringBuilder -> com.badlogic.gdx.utils.u:
    char[] chars -> a
    int length -> b
    char[] digits -> c
    void enlargeBuffer(int) -> b
    void appendNull() -> a
    void append0(char) -> a
    void append0(java.lang.String) -> a
    void append0(java.lang.CharSequence,int,int) -> a
    char charAt(int) -> charAt
    int length() -> length
    java.lang.String substring(int,int) -> a
    java.lang.String toString() -> toString
    java.lang.CharSequence subSequence(int,int) -> subSequence
    com.badlogic.gdx.utils.StringBuilder append(char) -> b
    com.badlogic.gdx.utils.StringBuilder append(int) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.Object) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.String) -> b
    com.badlogic.gdx.utils.StringBuilder append(java.lang.CharSequence) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.CharSequence,int,int) -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
com.badlogic.gdx.utils.TimeUtils -> com.badlogic.gdx.utils.v:
    long nanoTime() -> a
com.badlogic.gdx.utils.Timer -> com.badlogic.gdx.utils.w:
    com.badlogic.gdx.utils.Array instances -> a
    com.badlogic.gdx.utils.Timer$TimerThread thread -> b
    com.badlogic.gdx.utils.Timer instance -> c
    com.badlogic.gdx.utils.Array tasks -> d
    com.badlogic.gdx.utils.Timer instance() -> a
    void scheduleTask(com.badlogic.gdx.utils.Timer$Task,float) -> a
    void scheduleTask(com.badlogic.gdx.utils.Timer$Task,float,float,int) -> a
    void start() -> b
    long update(long,long) -> a
    void delay(long) -> a
    void wake() -> c
    void schedule(com.badlogic.gdx.utils.Timer$Task,float) -> b
com.badlogic.gdx.utils.Timer$Task -> com.badlogic.gdx.utils.x:
    long executeTimeMillis -> b
    long intervalMillis -> c
    int repeatCount -> d
    void cancel() -> a
    boolean isScheduled() -> b
com.badlogic.gdx.utils.Timer$TimerThread -> com.badlogic.gdx.utils.y:
    com.badlogic.gdx.Application app -> a
    long pauseMillis -> b
    void run() -> run
    void resume() -> b
    void pause() -> a
    void dispose() -> c
com.badlogic.gdx.utils.async.AsyncExecutor -> com.badlogic.gdx.utils.a.a:
    java.util.concurrent.ExecutorService executor -> a
    com.badlogic.gdx.utils.async.AsyncResult submit(com.badlogic.gdx.utils.async.AsyncTask) -> a
    void dispose() -> c
com.badlogic.gdx.utils.async.AsyncExecutor$2 -> com.badlogic.gdx.utils.a.b:
    com.badlogic.gdx.utils.async.AsyncTask val$task -> a
    com.badlogic.gdx.utils.async.AsyncExecutor this$0 -> b
    java.lang.Object call() -> call
com.badlogic.gdx.utils.async.AsyncResult -> com.badlogic.gdx.utils.a.c:
    java.util.concurrent.Future future -> a
    boolean isDone() -> a
    java.lang.Object get() -> b
com.badlogic.gdx.utils.async.AsyncTask -> com.badlogic.gdx.utils.a.d:
    java.lang.Object call() -> d
com.badlogic.gdx.utils.async.ThreadUtils -> com.badlogic.gdx.utils.a.e:
    void yield() -> a
com.badlogic.gdx.utils.reflect.ArrayReflection -> com.badlogic.gdx.utils.b.a:
    java.lang.Object newInstance(java.lang.Class,int) -> a
com.badlogic.gdx.utils.reflect.ClassReflection -> com.badlogic.gdx.utils.b.b:
    java.lang.String getSimpleName(java.lang.Class) -> a
